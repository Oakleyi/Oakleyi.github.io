<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Aabigale&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="www.aabigale.top/"/>
  <updated>2020-08-01T12:09:47.180Z</updated>
  <id>www.aabigale.top/</id>
  
  <author>
    <name>Aabigale</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>机器学习</title>
    <link href="www.aabigale.top/2020/07/28/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    <id>www.aabigale.top/2020/07/28/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-07-28T01:22:53.937Z</published>
    <updated>2020-08-01T12:09:47.180Z</updated>
    
    <content type="html"><![CDATA[<h1 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h1><a id="more"></a><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><h3 id="什么是机器学习？"><a href="#什么是机器学习？" class="headerlink" title="什么是机器学习？"></a>什么是机器学习？</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">计算机程序从经验E中学习，解决某一任务T，进行某一性能度量P，通过P测定在T上的表现因经验E而提高。</span><br></pre></td></tr></tbody></table></figure><h3 id="什么是监督学习？"><a href="#什么是监督学习？" class="headerlink" title="什么是监督学习？"></a>什么是监督学习？</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">给算法一个数据集，其中包含了正确答案，算法的目的是给出更多的正确答案</span><br></pre></td></tr></tbody></table></figure><h3 id="什么是无监督学习？"><a href="#什么是无监督学习？" class="headerlink" title="什么是无监督学习？"></a>什么是无监督学习？</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">数据集是没有任何标签、都具有相同标签或都没标签，不知道该如何使用该数据集。</span><br><span class="line">无监督学习将它分成不同的簇（类）--聚类算法</span><br><span class="line">找出数据结构--鸡尾酒聚会算法</span><br></pre></td></tr></tbody></table></figure><h2 id="单变量线性回归"><a href="#单变量线性回归" class="headerlink" title="单变量线性回归"></a>单变量线性回归</h2><h3 id="模型表示"><a href="#模型表示" class="headerlink" title="模型表示"></a>模型表示</h3><h3 id="代价函数"><a href="#代价函数" class="headerlink" title="代价函数"></a>代价函数</h3><h3 id="代价函数的直观理解"><a href="#代价函数的直观理解" class="headerlink" title="代价函数的直观理解"></a>代价函数的直观理解</h3><h3 id="梯度下降"><a href="#梯度下降" class="headerlink" title="梯度下降"></a>梯度下降</h3><h3 id="梯度下降的直观理解"><a href="#梯度下降的直观理解" class="headerlink" title="梯度下降的直观理解"></a>梯度下降的直观理解</h3><h3 id="梯度下降的线性回归"><a href="#梯度下降的线性回归" class="headerlink" title="梯度下降的线性回归"></a>梯度下降的线性回归</h3><h3 id="线性回归的梯度下降"><a href="#线性回归的梯度下降" class="headerlink" title="线性回归的梯度下降"></a>线性回归的梯度下降</h3><h2 id="线性代数回顾"><a href="#线性代数回顾" class="headerlink" title="线性代数回顾"></a>线性代数回顾</h2><h3 id="矩阵和向量"><a href="#矩阵和向量" class="headerlink" title="矩阵和向量"></a>矩阵和向量</h3><h3 id="加法和标量乘法"><a href="#加法和标量乘法" class="headerlink" title="加法和标量乘法"></a>加法和标量乘法</h3><h3 id="矩阵向量乘法"><a href="#矩阵向量乘法" class="headerlink" title="矩阵向量乘法"></a>矩阵向量乘法</h3><h3 id="矩阵乘法"><a href="#矩阵乘法" class="headerlink" title="矩阵乘法"></a>矩阵乘法</h3><h3 id="矩阵乘法的性质"><a href="#矩阵乘法的性质" class="headerlink" title="矩阵乘法的性质"></a>矩阵乘法的性质</h3><h3 id="逆、转置"><a href="#逆、转置" class="headerlink" title="逆、转置"></a>逆、转置</h3><h2 id="多变量线性回归-Linear-Regression-with-Multiple-Variables"><a href="#多变量线性回归-Linear-Regression-with-Multiple-Variables" class="headerlink" title="多变量线性回归(Linear Regression with Multiple Variables)"></a>多变量线性回归(Linear Regression with Multiple Variables)</h2><h3 id="多维特征"><a href="#多维特征" class="headerlink" title="多维特征"></a>多维特征</h3><h3 id="多变量梯度下降"><a href="#多变量梯度下降" class="headerlink" title="多变量梯度下降"></a>多变量梯度下降</h3><h3 id="梯度下降法实践1-特征缩放"><a href="#梯度下降法实践1-特征缩放" class="headerlink" title="梯度下降法实践1-特征缩放"></a>梯度下降法实践1-特征缩放</h3><h3 id="梯度下降法实践2-学习率"><a href="#梯度下降法实践2-学习率" class="headerlink" title="梯度下降法实践2-学习率"></a>梯度下降法实践2-学习率</h3><h3 id="特征和多项式回归"><a href="#特征和多项式回归" class="headerlink" title="特征和多项式回归"></a>特征和多项式回归</h3><h3 id="正规方程"><a href="#正规方程" class="headerlink" title="正规方程"></a>正规方程</h3><h2 id="Octave教程-Octave-Tutorial"><a href="#Octave教程-Octave-Tutorial" class="headerlink" title="Octave教程(Octave Tutorial)"></a>Octave教程(Octave Tutorial)</h2><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><h3 id="移动数据"><a href="#移动数据" class="headerlink" title="移动数据"></a>移动数据</h3><h3 id="计算数据"><a href="#计算数据" class="headerlink" title="计算数据"></a>计算数据</h3><h3 id="绘图数据"><a href="#绘图数据" class="headerlink" title="绘图数据"></a>绘图数据</h3><h3 id="控制语句：for，while，if语句"><a href="#控制语句：for，while，if语句" class="headerlink" title="控制语句：for，while，if语句"></a>控制语句：for，while，if语句</h3><h3 id="向量化-88"><a href="#向量化-88" class="headerlink" title="向量化 88"></a>向量化 88</h3><h3 id="工作和提交的编程练习"><a href="#工作和提交的编程练习" class="headerlink" title="工作和提交的编程练习"></a>工作和提交的编程练习</h3><h2 id="逻辑回归-Logistic-Regression"><a href="#逻辑回归-Logistic-Regression" class="headerlink" title="逻辑回归(Logistic Regression)"></a>逻辑回归(Logistic Regression)</h2><h3 id="分类问题"><a href="#分类问题" class="headerlink" title="分类问题"></a>分类问题</h3><h3 id="假说表示"><a href="#假说表示" class="headerlink" title="假说表示"></a>假说表示</h3><h3 id="判定边界"><a href="#判定边界" class="headerlink" title="判定边界"></a>判定边界</h3><h3 id="代价函数-1"><a href="#代价函数-1" class="headerlink" title="代价函数"></a>代价函数</h3><h3 id="简化的成本函数和梯度下降"><a href="#简化的成本函数和梯度下降" class="headerlink" title="简化的成本函数和梯度下降"></a>简化的成本函数和梯度下降</h3><h3 id="高级优化"><a href="#高级优化" class="headerlink" title="高级优化"></a>高级优化</h3><h3 id="多类别分类：一对多"><a href="#多类别分类：一对多" class="headerlink" title="多类别分类：一对多"></a>多类别分类：一对多</h3><h2 id="第七讲-正则化问题"><a href="#第七讲-正则化问题" class="headerlink" title="第七讲  正则化问题"></a>第七讲  正则化问题</h2><h3 id="过拟合的问题"><a href="#过拟合的问题" class="headerlink" title="过拟合的问题"></a>过拟合的问题</h3><h4 id="什么是过度拟合"><a href="#什么是过度拟合" class="headerlink" title="什么是过度拟合"></a>什么是过度拟合</h4><h5 id="例1-预测房价-lt-线性回归-gt"><a href="#例1-预测房价-lt-线性回归-gt" class="headerlink" title="例1  预测房价<线性回归>"></a>例1  预测房价&lt;线性回归&gt;</h5><p>训练集如下</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="E:\nodejs\node_global\hexo\source\_posts\机器学习\7.1.png" alt="7.1" title="">                </div>                <div class="image-caption">7.1</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="E:\nodejs\node_global\hexo\source\_posts\机器学习\7.2.png" alt="7.2" title="">                </div>                <div class="image-caption">7.2</div>            </figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">上图中的第一个图片：该算法没有很好的拟合训练集，称为欠拟合。</span><br><span class="line">上图中的第二个图片：与训练集很好的拟合</span><br><span class="line">上图中的第三个图片：该算法似乎很好的拟合训练集，但是上下波动，不是预测房价的一个很好的模型，这个称为过度拟合。&lt;另一种说法是该算法具有高方差&gt;</span><br></pre></td></tr></tbody></table></figure><p><strong>过度拟合问题将在变量过多的时候出现，但是代价函数可能非常接近0，或者恰好为 0。不能很好地应用到新样本</strong></p><h5 id="例2-分类问题"><a href="#例2-分类问题" class="headerlink" title="例2  分类问题"></a>例2  分类问题</h5><p>例题训练集</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="E:\nodejs\node_global\hexo\source\_posts\机器学习\7.3.png" alt="7.3" title="">                </div>                <div class="image-caption">7.3</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="E:\nodejs\node_global\hexo\source\_posts\机器学习\7.4.png" alt="7.4" title="">                </div>                <div class="image-caption">7.4</div>            </figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">上图中的第一个图片：这个算法也没有很好的拟合训练集，称为欠拟合。</span><br><span class="line">上图中的第二个图片：与训练集很好的拟合</span><br><span class="line">上图中的第三个图片：该算法似乎很好的拟合训练集，但是上下波动，不是预测房价的一个很好的模型，这个称为过度拟合。&lt;另一种说法是该算法具有高方差&gt;</span><br></pre></td></tr></tbody></table></figure><h4 id="过拟合问题发生时解决方法"><a href="#过拟合问题发生时解决方法" class="headerlink" title="过拟合问题发生时解决方法"></a>过拟合问题发生时解决方法</h4><ul><li>减少特征变量。&lt;模型选择算法&gt;</li><li>正则化。 保留所有的特征，但是减少量级或减少参数的大小。</li></ul><h3 id="代价函数-2"><a href="#代价函数-2" class="headerlink" title="代价函数"></a>代价函数</h3><h4 id="例1"><a href="#例1" class="headerlink" title="例1"></a>例1</h4><p><img src="E:%5Cnodejs%5Cnode_global%5Chexo%5Csource_posts%5C%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%5C7.5.png" alt="7.5"></p><p>在上图中可以看出第二个曲线图过拟合了，不能很好的泛化。</p><p><strong>解决方法：加入惩罚项使得θ_3 和 θ__4都非常小，将会得到一个更简单的假设模型</strong></p><h4 id="例2-房屋预测模型"><a href="#例2-房屋预测模型" class="headerlink" title="例2  房屋预测模型"></a>例2  房屋预测模型</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">特征：x_1、x_2、......、x_100</span><br><span class="line">参数：θ0、θ1、θ2、......、θ100</span><br><span class="line"></span><br><span class="line">但是不知道参数中哪些是高阶项</span><br></pre></td></tr></tbody></table></figure><p><strong>此时解决过拟合问题的方法是：通过修改代价函数来缩小所有的参数</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在代价函数后面添加一个额外的正则化项，来缩小每一个参数。</span><br><span class="line"></span><br><span class="line">tip: 1、添加的正则项从θ0、θ1求和在实际过程中没什么区别</span><br><span class="line">     2、正则参数的作用：控制目标函数的第一项和目标函数的第二项、正         则化目标之间的平衡关系</span><br></pre></td></tr></tbody></table></figure><h3 id="正则化线性回归"><a href="#正则化线性回归" class="headerlink" title="正则化线性回归"></a>正则化线性回归</h3><h4 id="梯度下降-1"><a href="#梯度下降-1" class="headerlink" title="梯度下降"></a>梯度下降</h4><p>正则化线性回归优化目标</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="E:\nodejs\node_global\hexo\source\_posts\机器学习\7.6.png" alt="7.6" title="">                </div>                <div class="image-caption">7.6</div>            </figure><p>用梯度下降法去最小化最初的代价函数，即下图算法</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="E:\nodejs\node_global\hexo\source\_posts\机器学习\7.7.png" alt="7.7" title="">                </div>                <div class="image-caption">7.7</div>            </figure><p>处理 0 的原因是对于正则化线性回归，惩罚对象是 θ1、θ2、……、θn，没有惩罚 θ0。</p><p>对正则化代价函数 J(θ) 用梯度下降法进行最小化</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="E:\nodejs\node_global\hexo\source\_posts\机器学习\7.8.png" alt="7.8" title="">                </div>                <div class="image-caption">7.8</div>            </figure><p>对上式简化得到图7.9</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="E:\nodejs\node_global\hexo\source\_posts\机器学习\7.9.png" alt="7.9" title="">                </div>                <div class="image-caption">7.9</div>            </figure><p>由图7.9不难看出正则化线性回归的梯度下降算法的变化在于，每次都在原有算法更新规则的基础上令值减少了一个额外的值，往零更进一步。</p><h4 id="正规方程-1"><a href="#正规方程-1" class="headerlink" title="正规方程"></a>正规方程</h4><p>方法如图7.10所示</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="E:\nodejs\node_global\hexo\source\_posts\机器学习\7.10.png" alt="7.10" title="">                </div>                <div class="image-caption">7.10</div>            </figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tip: 1、因为X是 m*（n+1）的矩阵，所以需要对进行转置才能与y进行相乘。</span><br><span class="line">     2、图中的矩阵尺寸为（ n + 1 ）*（ n + 1 ）</span><br></pre></td></tr></tbody></table></figure><h3 id="正则化逻辑回归模型"><a href="#正则化逻辑回归模型" class="headerlink" title="正则化逻辑回归模型"></a>正则化逻辑回归模型</h3><h4 id="梯度下降-2"><a href="#梯度下降-2" class="headerlink" title="梯度下降"></a>梯度下降</h4><p>正则化逻辑回归模型优化目标</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="E:\nodejs\node_global\hexo\source\_posts\机器学习\7.11.png" alt="7.11" title="">                </div>                <div class="image-caption">7.11</div>            </figure><p>添加的正则项的作用：惩罚参数θ1、θ2、……、θn，防止他们过大，产生的效果就是防止该算法过度拟合。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="E:\nodejs\node_global\hexo\source\_posts\机器学习\7.7.png" alt="7.7" title="">                </div>                <div class="image-caption">7.7</div>            </figure><p>对正则化代价函数 J(θ) 用梯度下降法进行最小化</p><img src="E:\nodejs\node_global\hexo\source\_posts\机器学习\7.8.png" alt="7.8"><h4 id="另一种高级优化算法"><a href="#另一种高级优化算法" class="headerlink" title="另一种高级优化算法"></a>另一种高级优化算法</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">需要自己定义一个 costFunction 函数，这个函数以参数向量 theta 作为输入。&lt;参数从θ0、θ1、θ2、......、θn&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="正则化线性回归-1"><a href="#正则化线性回归-1" class="headerlink" title="正则化线性回归"></a>正则化线性回归</h3><h3 id="正则化的逻辑回归模型"><a href="#正则化的逻辑回归模型" class="headerlink" title="正则化的逻辑回归模型"></a>正则化的逻辑回归模型</h3><h2 id="第八讲-神经网络"><a href="#第八讲-神经网络" class="headerlink" title="第八讲  神经网络"></a>第八讲  神经网络</h2><h3 id="非线性回归———阐述研究神经网络目的-lt-例题引入-gt"><a href="#非线性回归———阐述研究神经网络目的-lt-例题引入-gt" class="headerlink" title="非线性回归———阐述研究神经网络目的<例题引入>"></a>非线性回归———阐述研究神经网络目的&lt;例题引入&gt;</h3><h4 id="例1-监督学习分类问题"><a href="#例1-监督学习分类问题" class="headerlink" title="例1   监督学习分类问题"></a>例1   监督学习分类问题</h4><p>训练集如图所示</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="E:\nodejs\node_global\hexo\source\_posts\机器学习\8.1.png" alt="8.1" title="">                </div>                <div class="image-caption">8.1</div>            </figure><p>若用  logistic  回归函数，要构造一个包含很多非线性项的  logistic  回归函数，在本例中特征只有两项，当把特征值的所有组合都包含在多项式中，确实能能得到一个不错的结果。</p><p>但有趣的机器学习问题特征值往往不止2项。这时这种方法计算量会巨大</p><h3 id="神经元和大脑"><a href="#神经元和大脑" class="headerlink" title="神经元和大脑"></a>神经元和大脑</h3><h3 id="模型表示1"><a href="#模型表示1" class="headerlink" title="模型表示1"></a>模型表示1</h3><h3 id="模型表示2"><a href="#模型表示2" class="headerlink" title="模型表示2"></a>模型表示2</h3><h3 id="特征和直观理解1"><a href="#特征和直观理解1" class="headerlink" title="特征和直观理解1"></a>特征和直观理解1</h3><h3 id="样本和直观理解2"><a href="#样本和直观理解2" class="headerlink" title="样本和直观理解2"></a>样本和直观理解2</h3><h3 id="多类分类"><a href="#多类分类" class="headerlink" title="多类分类"></a>多类分类</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;机器学习&quot;&gt;&lt;a href=&quot;#机器学习&quot; class=&quot;headerlink&quot; title=&quot;机器学习&quot;&gt;&lt;/a&gt;机器学习&lt;/h1&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>数学建模比赛</title>
    <link href="www.aabigale.top/2020/07/25/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E6%AF%94%E8%B5%9B/"/>
    <id>www.aabigale.top/2020/07/25/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E6%AF%94%E8%B5%9B/</id>
    <published>2020-07-25T13:08:59.797Z</published>
    <updated>2020-07-25T13:15:06.542Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数学建模比赛"><a href="#数学建模比赛" class="headerlink" title="数学建模比赛"></a>数学建模比赛</h1><a id="more"></a><h2 id="评价类模型"><a href="#评价类模型" class="headerlink" title="评价类模型"></a>评价类模型</h2><h3 id="评价类模型——层次分析法（AHP）"><a href="#评价类模型——层次分析法（AHP）" class="headerlink" title="评价类模型——层次分析法（AHP）"></a>评价类模型——层次分析法（AHP）</h3><p>主要用于解决评价类问题（例如：选择哪种方案最好、哪位运动员或者员工表现的更优秀。）</p><h4 id="使用打分法解决评价类问题"><a href="#使用打分法解决评价类问题" class="headerlink" title="使用打分法解决评价类问题"></a>使用打分法解决评价类问题</h4><p>完成下列表格即可</p><table><thead><tr><th></th><th>指标权重</th><th>方案1</th><th>方案2</th><th>……</th></tr></thead><tbody><tr><td>指标1</td><td></td><td></td><td></td><td></td></tr><tr><td>指标2</td><td></td><td></td><td></td><td></td></tr><tr><td>指标3</td><td></td><td></td><td></td><td></td></tr><tr><td>……</td><td></td><td></td><td></td><td></td></tr></tbody></table><h4 id="解决评价类问题，首先要想到以下三个问题："><a href="#解决评价类问题，首先要想到以下三个问题：" class="headerlink" title="解决评价类问题，首先要想到以下三个问题："></a>解决评价类问题，首先要想到以下三个问题：</h4><ul><li>评价的目标是什么？</li><li>达到目的有哪几种可选方案？</li><li>评价的准则或者说指标是什么？（根据什么来评价好坏）<strong>背景资料、常识以及网上搜集参考资料。&lt;优先选择知网、万方、百度学术、谷歌学术，借鉴已发表的论文&gt;</strong>。推荐一个网站<strong>虫部落</strong></li></ul><h4 id="一道引出层次分析的例题"><a href="#一道引出层次分析的例题" class="headerlink" title="一道引出层次分析的例题"></a>一道引出层次分析的例题</h4><p>​        高考后，小明想去旅游。爱查阅攻略后，他初步选择了苏杭、北戴河和桂林三地之一作为目标景点。请你<strong>确定评价指标、形成评价体系</strong>来为小明同学选择最佳方案。</p><ul><li><p>加入查阅资料后选择了以下五个指标：景色、旅游花费、居住环境、饮食状况、交通便利程度</p></li><li><p>填写权重表格</p><table><thead><tr><th></th><th>指标权重</th><th>苏杭</th><th>北戴河</th><th>桂林</th></tr></thead><tbody><tr><td>景色</td><td></td><td></td><td></td><td></td></tr><tr><td>花费</td><td></td><td></td><td></td><td></td></tr><tr><td>居住</td><td></td><td></td><td></td><td></td></tr><tr><td>饮食</td><td></td><td></td><td></td><td></td></tr><tr><td>交通</td><td></td><td></td><td></td><td></td></tr></tbody></table></li></ul><ul><li><p>填写表格</p><ul><li><p>分而治之思想</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">问题：一次性考虑多个指标之间的关系，往往考虑不周</span><br><span class="line">解决方法：两个两个指标进行比较，最终根据两两比较的结果来推算权重</span><br></pre></td></tr></tbody></table></figure><p>根据下表标度填写表格</p><table><thead><tr><th>标度</th><th>含义(重要性有时候解释为满意度)</th></tr></thead><tbody><tr><td>1</td><td>表示两个因素相比，具有同样重要性</td></tr><tr><td>3</td><td>表示两个因素相比，一个因素比另一个因素稍微重要</td></tr><tr><td>5</td><td>表示两个因素相比，一个因素比另一个因素明显重要</td></tr><tr><td>7</td><td>表示两个因素相比，一个因素比另一个因素强烈重要</td></tr><tr><td>9</td><td>表示两个因素相比，一个因素比另一个因素极端重要</td></tr><tr><td>2,4,6,8</td><td>上述两相邻判断的中值</td></tr><tr><td>倒数</td><td>A和B相比如果标度为3，那么B和A相比就是1/3</td></tr></tbody></table></li><li><p><strong>判断矩阵</strong></p><table><thead><tr><th></th><th>景色</th><th>花费</th><th>居住</th><th>饮食</th><th>交通</th></tr></thead><tbody><tr><td>景色</td><td>1</td><td>1/2</td><td>4</td><td>3</td><td>3</td></tr><tr><td>花费</td><td>2</td><td>1</td><td>7</td><td>5</td><td>5</td></tr><tr><td>居住</td><td>1/4</td><td>1/7</td><td>1</td><td>1/2</td><td>1/3</td></tr><tr><td>饮食</td><td>1/3</td><td>1/5</td><td>2</td><td>1</td><td>1</td></tr><tr><td>交通</td><td>1/3</td><td>1/5</td><td>3</td><td>1</td><td>1</td></tr></tbody></table><p>该方阵有如下特点</p><ul><li>aij 表示的意义是，与指标j相比，i的重要程度</li><li>i = j 时，两指标相同，同等重要，对应对角线</li><li>aij &gt; 0 且满足aij * aji = 1  （<strong>正互反矩阵</strong>）</li></ul><p>重复使用判断矩阵得到以下矩阵</p><table><thead><tr><th>花费</th><th>苏杭</th><th>北戴河</th><th>桂林</th></tr></thead><tbody><tr><td>苏杭</td><td>1</td><td>1/3</td><td>1/8</td></tr><tr><td>北戴河</td><td>3</td><td>1</td><td>1/4</td></tr><tr><td>桂林</td><td>8</td><td>3</td><td>1</td></tr></tbody></table><table><thead><tr><th>居住</th><th>苏杭</th><th>北戴河</th><th>桂林</th></tr></thead><tbody><tr><td>苏杭</td><td>1</td><td>1</td><td>3</td></tr><tr><td>北戴河</td><td>1</td><td>1</td><td>3</td></tr><tr><td>桂林</td><td>1/3</td><td>1/3</td><td>1</td></tr></tbody></table><table><thead><tr><th>饮食</th><th>苏杭</th><th>北戴河</th><th>桂林</th></tr></thead><tbody><tr><td>苏杭</td><td>1</td><td>3</td><td>4</td></tr><tr><td>北戴河</td><td>1/3</td><td>1</td><td>1</td></tr><tr><td>桂林</td><td>1/4</td><td>1</td><td>1</td></tr></tbody></table><table><thead><tr><th>交通</th><th>苏杭</th><th>北戴河</th><th>桂林</th></tr></thead><tbody><tr><td>苏杭</td><td>1</td><td>1</td><td>1/4</td></tr><tr><td>北戴河</td><td>1</td><td>1</td><td>1/4</td></tr><tr><td>桂林</td><td>4</td><td>4</td><td>1</td></tr></tbody></table><table><thead><tr><th>景色</th><th>苏杭</th><th>北戴河</th><th>桂林</th></tr></thead><tbody><tr><td>苏杭</td><td>1</td><td>2</td><td>4</td></tr><tr><td>北戴河</td><td>1/2</td><td>1</td><td>2</td></tr><tr><td>桂林</td><td>1/4</td><td>1/2</td><td>1</td></tr></tbody></table><p>一个可能出现问题的地方</p><p>假如是该矩阵</p><table><thead><tr><th>景色</th><th>苏杭</th><th>北戴河</th><th>桂林</th></tr></thead><tbody><tr><td>苏杭</td><td>1</td><td>2</td><td>1</td></tr><tr><td>北戴河</td><td>1/2</td><td>1</td><td>2</td></tr><tr><td>桂林</td><td>1</td><td>1/2</td><td>1</td></tr></tbody></table></li></ul></li></ul><pre><code><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">设苏杭 = A ，北戴河 = B，桂林 = C</span><br><span class="line">苏杭比北戴河景色好一点 A&gt;B</span><br><span class="line">苏杭和桂林景色一样好 A=B</span><br><span class="line">北戴河比桂林景色好一点 B&gt;C</span><br><span class="line">出现了矛盾之处（不一致现象）</span><br></pre></td></tr></tbody></table></figure>* **一致矩阵的特点：各行（各例）之间成倍数关系，在使用判断矩阵求权重之前，必须对其进行一致性检验*** 一致性检验  引理：n阶正互反矩阵A为一致行矩阵时当且仅当最大特征值a = n，且当正互反矩阵A非一致时，一定满足 a&gt;n 。**判断矩阵越不一致时，最大特征值与n相差就越大**  证明过程：  步骤：  * 计算一致性指标CI，CI= （a-n）/（n-1）  * 查找对应的平均随机一致性指标 RI    | n    | 1    | 2    | 3    | 4    | 5    | 6    | 7    | 8    | 9    | 10   | 11   | 12   | 13   | 14   | 15   |    | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- |    | RI   | 0    | 0    | 0.52 | 0.89 | 1.12 | 1.26 | 1.36 | 1.41 | 1.46 | 1.49 | 1.52 | 1.54 | 1.56 | 1.58 | 1.59 |  * 计算一致性比例CR，CR = CI/RI    **如果CR &lt; 0.1，则可认为判断矩阵的一致性可以接受；否则需要对判断矩阵进行修正**</code></pre><ul><li><p>计算权重</p><ul><li><p>一致矩阵计算</p><p>权重就景色而言，苏杭的重要性如果是1，那么北戴河的重要性就是1/2，桂林的重要性就是1/4。</p><table><thead><tr><th>景色</th><th>苏杭</th><th>北戴河</th><th>桂林</th></tr></thead><tbody><tr><td>苏杭</td><td>1</td><td>2</td><td>4</td></tr><tr><td>北戴河</td><td>1/2</td><td>1</td><td>2</td></tr><tr><td>桂林</td><td>1/4</td><td>1/2</td><td>1</td></tr></tbody></table><p> <strong>权重一定要进行归一化处理</strong></p><p>​    苏杭 = 1 / (1+0.5+0.25)</p><p>北戴河 = 0.5 / (1+0.5+0.25)</p><p>​    桂林 = 0.25 / (1+0.5+0.25</p></li><li><p>算术平均法</p><table><thead><tr><th>景色</th><th>苏杭</th><th>北戴河</th><th>桂林</th></tr></thead><tbody><tr><td>苏杭</td><td>1</td><td>2</td><td>5</td></tr><tr><td>北戴河</td><td>1/2</td><td>1</td><td>2</td></tr><tr><td>桂林</td><td>1/5</td><td>1/2</td><td>1</td></tr></tbody></table><p>分别使用一二三列的数据，再求平均权重</p><ul><li><p>将判断矩阵按照列归一化</p><table><thead><tr><th>景色</th><th>苏杭</th><th>北戴河</th><th>桂林</th></tr></thead><tbody><tr><td>苏杭</td><td>0.5882</td><td>0.5714</td><td>0.625</td></tr><tr><td>北戴河</td><td>0.2941</td><td>0.2857</td><td>0.25</td></tr><tr><td>桂林</td><td>0.1177</td><td>0.1429</td><td>0.125</td></tr></tbody></table></li><li><p>将归一化的各列相加</p><table><thead><tr><th></th><th>未归一化的权重</th></tr></thead><tbody><tr><td>苏杭</td><td>0.5882+0.5714+0.625 = 1.7846</td></tr><tr><td>北戴河</td><td>0.2941+0.2857+0.25 = 0.8298</td></tr><tr><td>桂林</td><td>0.1177+0.1429+0.125 = 0.3856</td></tr></tbody></table></li><li><p>将相加后的向量中的每一个袁初一n即可得到权重向量</p><table><thead><tr><th></th><th>权重</th></tr></thead><tbody><tr><td>苏杭</td><td>1.7846 / 3 = 0.5949</td></tr><tr><td>北戴河</td><td>0.8298 /3 = 0.2766</td></tr><tr><td>桂林</td><td>0.3856 / 3 = 0.1285</td></tr></tbody></table></li></ul></li><li><p>几何平均法</p></li><li><p>特征值法</p></li></ul></li><li><p>填写表格</p><table><thead><tr><th></th><th>指标权重</th><th>苏杭</th><th>北戴河</th><th>桂林</th></tr></thead><tbody><tr><td>景色</td><td>0.2636</td><td>0.5954</td><td>0.27644</td><td>0.1283</td></tr><tr><td>花费</td><td>0.4758</td><td>0.0819</td><td>0.2363</td><td>0.6817</td></tr><tr><td>居住</td><td>0.0538</td><td>0.4286</td><td>0.4286</td><td>0.1429</td></tr><tr><td>饮食</td><td>0.0981</td><td>0.6337</td><td>0.1919</td><td>0.1744</td></tr><tr><td>交通</td><td>0.1087</td><td>0.1667</td><td>0.1667</td><td>0.6667</td></tr></tbody></table><p>苏杭得分：0.5954 * 0.2636 + 0.0819 * 0.4758 + 0.4286 * 0.538 + 0.6337 * 0.0981 + 0.1667 * 0.1087 = 0.299</p><p>北戴河得分：0.245</p><p>桂林得分：0.455</p></li></ul><h4 id="小结——层次分析法的步骤"><a href="#小结——层次分析法的步骤" class="headerlink" title="小结——层次分析法的步骤"></a>小结——层次分析法的步骤</h4><ul><li>分析系统中各因素之间的关系，建立关系的递阶层次结构<strong>需放入论文，推荐亿图图示软件画结构图</strong><ul><li>目标层</li><li>准则层</li><li>方案层</li></ul></li><li>构造判断矩阵(直接自己写)</li><li>计算权重：有三种方法都要计算</li></ul><h3 id="TOPSIS-法-（优劣解距离法）"><a href="#TOPSIS-法-（优劣解距离法）" class="headerlink" title="TOPSIS 法 （优劣解距离法）"></a>TOPSIS 法 （优劣解距离法）</h3><h2 id="插值与拟合模型"><a href="#插值与拟合模型" class="headerlink" title="插值与拟合模型"></a>插值与拟合模型</h2><h2 id="相关性模型"><a href="#相关性模型" class="headerlink" title="相关性模型"></a>相关性模型</h2><h2 id="回归模型"><a href="#回归模型" class="headerlink" title="回归模型"></a>回归模型</h2><h2 id="图论模型"><a href="#图论模型" class="headerlink" title="图论模型"></a>图论模型</h2><h2 id="分类问题"><a href="#分类问题" class="headerlink" title="分类问题"></a>分类问题</h2><h2 id="聚类模型"><a href="#聚类模型" class="headerlink" title="聚类模型"></a>聚类模型</h2><h2 id="时间序列模型"><a href="#时间序列模型" class="headerlink" title="时间序列模型"></a>时间序列模型</h2><h2 id="预测模型"><a href="#预测模型" class="headerlink" title="预测模型"></a>预测模型</h2><h2 id="降维模型"><a href="#降维模型" class="headerlink" title="降维模型"></a>降维模型</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;数学建模比赛&quot;&gt;&lt;a href=&quot;#数学建模比赛&quot; class=&quot;headerlink&quot; title=&quot;数学建模比赛&quot;&gt;&lt;/a&gt;数学建模比赛&lt;/h1&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Python深度学习-----Python机器学习应用</title>
    <link href="www.aabigale.top/2020/07/13/Python%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-----Python%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%BA%94%E7%94%A8/"/>
    <id>www.aabigale.top/2020/07/13/Python%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-----Python%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%BA%94%E7%94%A8/</id>
    <published>2020-07-13T02:36:58.976Z</published>
    <updated>2020-07-25T13:15:06.536Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python深度学习—–Python机器学习应用"><a href="#Python深度学习—–Python机器学习应用" class="headerlink" title="Python深度学习—–Python机器学习应用"></a>Python深度学习—–Python机器学习应用</h1><a id="more"></a><p>书籍推荐：《 机器学习 》 -  周志华，《 PRML》 -  Bishop ，</p><p>课程推荐：《 Machine  Learning 》-  Andrew  Ng  ，《 CS231n 》  -  Fei-Fei Li</p><h2 id="课程导学"><a href="#课程导学" class="headerlink" title="课程导学"></a>课程导学</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Python深度学习—–Python机器学习应用&quot;&gt;&lt;a href=&quot;#Python深度学习—–Python机器学习应用&quot; class=&quot;headerlink&quot; title=&quot;Python深度学习—–Python机器学习应用&quot;&gt;&lt;/a&gt;Python深度学习—–Python机器学习应用&lt;/h1&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Linux C  C++ 后端应届工程师</title>
    <link href="www.aabigale.top/2020/06/12/Linux%20C%20%20C++%20%E5%90%8E%E7%AB%AF%E5%BA%94%E5%B1%8A%E5%B7%A5%E7%A8%8B%E5%B8%88/"/>
    <id>www.aabigale.top/2020/06/12/Linux%20C%20%20C++%20%E5%90%8E%E7%AB%AF%E5%BA%94%E5%B1%8A%E5%B7%A5%E7%A8%8B%E5%B8%88/</id>
    <published>2020-06-12T01:37:31.872Z</published>
    <updated>2020-07-25T13:15:06.532Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux-C-C-后端应届工程师"><a href="#Linux-C-C-后端应届工程师" class="headerlink" title="Linux C / C++ 后端应届工程师"></a>Linux C / C++ 后端应届工程师</h1><a id="more"></a><h2 id="基础知识以及-Linux-入门"><a href="#基础知识以及-Linux-入门" class="headerlink" title="基础知识以及 Linux 入门"></a>基础知识以及 Linux 入门</h2><h3 id="第一阶段：2-3个月"><a href="#第一阶段：2-3个月" class="headerlink" title="第一阶段：2~3个月"></a>第一阶段：2~3个月</h3><h4 id="扎实算法和数据结构，刷LeetCode，刷出最优解"><a href="#扎实算法和数据结构，刷LeetCode，刷出最优解" class="headerlink" title="扎实算法和数据结构，刷LeetCode，刷出最优解"></a>扎实算法和数据结构，刷LeetCode，刷出最优解</h4><h4 id="扎实C语言："><a href="#扎实C语言：" class="headerlink" title="扎实C语言："></a>扎实C语言：</h4><h4 id="基本数据结构，"><a href="#基本数据结构，" class="headerlink" title="基本数据结构，"></a>基本数据结构，</h4><h4 id="指针：指针、指针步长、为啥能够通过指针找到对应数据、函数指针"><a href="#指针：指针、指针步长、为啥能够通过指针找到对应数据、函数指针" class="headerlink" title="指针：指针、指针步长、为啥能够通过指针找到对应数据、函数指针"></a>指针：指针、指针步长、为啥能够通过指针找到对应数据、函数指针</h4><h3 id="第二阶段：2-3个月"><a href="#第二阶段：2-3个月" class="headerlink" title="第二阶段：2~3个月"></a>第二阶段：2~3个月</h3><h4 id="OO思想，用函数指针去搞定OO思想"><a href="#OO思想，用函数指针去搞定OO思想" class="headerlink" title="OO思想，用函数指针去搞定OO思想"></a>OO思想，用函数指针去搞定OO思想</h4><h4 id="Linux入门，几个常用命令，调试手段等"><a href="#Linux入门，几个常用命令，调试手段等" class="headerlink" title="Linux入门，几个常用命令，调试手段等"></a>Linux入门，几个常用命令，调试手段等</h4><h4 id="Linux-c编程入门，多线程、多进程、内存管理、网络编程等等，Unix环境高级编程"><a href="#Linux-c编程入门，多线程、多进程、内存管理、网络编程等等，Unix环境高级编程" class="headerlink" title="Linux c编程入门，多线程、多进程、内存管理、网络编程等等，Unix环境高级编程"></a>Linux c编程入门，多线程、多进程、内存管理、网络编程等等，Unix环境高级编程</h4><h3 id="第三阶段：2-3个月"><a href="#第三阶段：2-3个月" class="headerlink" title="第三阶段：2~3个月"></a>第三阶段：2~3个月</h3><h4 id="学会封装思维，接口思维，多态思维等等"><a href="#学会封装思维，接口思维，多态思维等等" class="headerlink" title="学会封装思维，接口思维，多态思维等等"></a>学会封装思维，接口思维，多态思维等等</h4><h4 id="C-入门，掌握C-with-class，C-的OOP-两者的区别以及联系"><a href="#C-入门，掌握C-with-class，C-的OOP-两者的区别以及联系" class="headerlink" title="C++入门，掌握C with class，C++的OOP,两者的区别以及联系"></a>C++入门，掌握C with class，C++的OOP,两者的区别以及联系</h4><h4 id="使用Linux-C-将第二阶段的项目重写一遍"><a href="#使用Linux-C-将第二阶段的项目重写一遍" class="headerlink" title="使用Linux C++将第二阶段的项目重写一遍"></a>使用Linux C++将第二阶段的项目重写一遍</h4><h2 id="第二大阶段：造轮子的能力"><a href="#第二大阶段：造轮子的能力" class="headerlink" title="第二大阶段：造轮子的能力"></a>第二大阶段：造轮子的能力</h2><h3 id="第一阶段：2-3个月-1"><a href="#第一阶段：2-3个月-1" class="headerlink" title="第一阶段：2~3个月"></a>第一阶段：2~3个月</h3><h4 id="基础版高并发服务器，参考libevent、muduo等"><a href="#基础版高并发服务器，参考libevent、muduo等" class="headerlink" title="基础版高并发服务器，参考libevent、muduo等"></a>基础版高并发服务器，参考libevent、muduo等</h4><h4 id="多线程、多进程、以及IO多路复用"><a href="#多线程、多进程、以及IO多路复用" class="headerlink" title="多线程、多进程、以及IO多路复用"></a>多线程、多进程、以及IO多路复用</h4><h4 id="线程池、内存池的实现，为服务器增加组件"><a href="#线程池、内存池的实现，为服务器增加组件" class="headerlink" title="线程池、内存池的实现，为服务器增加组件"></a>线程池、内存池的实现，为服务器增加组件</h4><h4 id="日志组件"><a href="#日志组件" class="headerlink" title="日志组件"></a>日志组件</h4><h4 id="消息队列–做限流削峰"><a href="#消息队列–做限流削峰" class="headerlink" title="消息队列–做限流削峰"></a>消息队列–做限流削峰</h4><h3 id="第二阶段：系统学习操作系统与分布式系统"><a href="#第二阶段：系统学习操作系统与分布式系统" class="headerlink" title="第二阶段：系统学习操作系统与分布式系统"></a>第二阶段：系统学习操作系统与分布式系统</h3><h4 id="1、编写小型操作系统：参考清华大学操作系统课程的ucore-扎扎实实2-3个月"><a href="#1、编写小型操作系统：参考清华大学操作系统课程的ucore-扎扎实实2-3个月" class="headerlink" title="1、编写小型操作系统：参考清华大学操作系统课程的ucore 扎扎实实2~3个月"></a>1、编写小型操作系统：参考清华大学操作系统课程的ucore 扎扎实实2~3个月</h4><h5 id="a-深入理解计算机系统（链接、装载那必须好好看）"><a href="#a-深入理解计算机系统（链接、装载那必须好好看）" class="headerlink" title="a)深入理解计算机系统（链接、装载那必须好好看）"></a>a)深入理解计算机系统（链接、装载那必须好好看）</h5><h4 id="2、编写分布式系统：参考资料MIT的6-824课程，刷raft的论文，扎实搞2-3个月"><a href="#2、编写分布式系统：参考资料MIT的6-824课程，刷raft的论文，扎实搞2-3个月" class="headerlink" title="2、编写分布式系统：参考资料MIT的6.824课程，刷raft的论文，扎实搞2~3个月"></a>2、编写分布式系统：参考资料MIT的6.824课程，刷raft的论文，扎实搞2~3个月</h4><h2 id="第三大阶段：培养阅读源码的能力"><a href="#第三大阶段：培养阅读源码的能力" class="headerlink" title="第三大阶段：培养阅读源码的能力"></a>第三大阶段：培养阅读源码的能力</h2><h3 id="第一阶段：3-4个月，（需要学会利用已有资源，达到一个加速效果，比如一些博客和书籍）"><a href="#第一阶段：3-4个月，（需要学会利用已有资源，达到一个加速效果，比如一些博客和书籍）" class="headerlink" title="第一阶段：3~4个月，（需要学会利用已有资源，达到一个加速效果，比如一些博客和书籍）"></a>第一阶段：3~4个月，（需要学会利用已有资源，达到一个加速效果，比如一些博客和书籍）</h3><p>推荐Redis、Nginx、Rocksdb等等</p><p>学会使用，以及懂源码原理</p><p>这里推荐一个群：568892619</p><p>在这个阶段，顺便实现协程</p><p>需要关注的几个特性：栈自动扩容、HOOK机制等等</p><h3 id="第二阶段：1个月"><a href="#第二阶段：1个月" class="headerlink" title="第二阶段：1个月"></a>第二阶段：1个月</h3><h4 id="Linux内核相关特性"><a href="#Linux内核相关特性" class="headerlink" title="Linux内核相关特性"></a>Linux内核相关特性</h4><h4 id="进程调度过程、线程与进程的内核实现区别、内存管理（伙伴系统与slab系统）"><a href="#进程调度过程、线程与进程的内核实现区别、内存管理（伙伴系统与slab系统）" class="headerlink" title="进程调度过程、线程与进程的内核实现区别、内存管理（伙伴系统与slab系统）"></a>进程调度过程、线程与进程的内核实现区别、内存管理（伙伴系统与slab系统）</h4><h4 id="进程和内存相关数据结构"><a href="#进程和内存相关数据结构" class="headerlink" title="进程和内存相关数据结构"></a>进程和内存相关数据结构</h4><h4 id="内核slab链表细节，常见的slab子项（例如task-struck，file-struct等等）"><a href="#内核slab链表细节，常见的slab子项（例如task-struck，file-struct等等）" class="headerlink" title="内核slab链表细节，常见的slab子项（例如task_struck，file_struct等等）"></a>内核slab链表细节，常见的slab子项（例如task_struck，file_struct等等）</h4><h4 id="五种IO模型，以及等待队列的意义"><a href="#五种IO模型，以及等待队列的意义" class="headerlink" title="五种IO模型，以及等待队列的意义"></a>五种IO模型，以及等待队列的意义</h4><h4 id="select、poll、epoll之间的区别，以及内核实现"><a href="#select、poll、epoll之间的区别，以及内核实现" class="headerlink" title="select、poll、epoll之间的区别，以及内核实现"></a>select、poll、epoll之间的区别，以及内核实现</h4><h2 id="第四大阶段：-到这里，如果进展顺利的话，大概刚刚才到大三"><a href="#第四大阶段：-到这里，如果进展顺利的话，大概刚刚才到大三" class="headerlink" title="第四大阶段： 到这里，如果进展顺利的话，大概刚刚才到大三"></a>第四大阶段： 到这里，如果进展顺利的话，大概刚刚才到大三</h2><h4 id="总结复习已有知识，查漏补缺"><a href="#总结复习已有知识，查漏补缺" class="headerlink" title="总结复习已有知识，查漏补缺"></a>总结复习已有知识，查漏补缺</h4><h4 id="完善高并发服务器，改为分布式服务器"><a href="#完善高并发服务器，改为分布式服务器" class="headerlink" title="完善高并发服务器，改为分布式服务器"></a>完善高并发服务器，改为分布式服务器</h4><h4 id="学会使用几个RPC组件，学会protobuf的使用等等"><a href="#学会使用几个RPC组件，学会protobuf的使用等等" class="headerlink" title="学会使用几个RPC组件，学会protobuf的使用等等"></a>学会使用几个RPC组件，学会protobuf的使用等等</h4><h4 id="学习设计模式的思维"><a href="#学习设计模式的思维" class="headerlink" title="学习设计模式的思维"></a>学习设计模式的思维</h4><h4 id="学习架构思维：-推荐：《大数据日知录》"><a href="#学习架构思维：-推荐：《大数据日知录》" class="headerlink" title="学习架构思维： 推荐：《大数据日知录》"></a>学习架构思维： 推荐：《大数据日知录》</h4><h4 id="单机-gt-多机"><a href="#单机-gt-多机" class="headerlink" title="单机->多机"></a>单机-&gt;多机</h4><h4 id="分层思维"><a href="#分层思维" class="headerlink" title="分层思维"></a>分层思维</h4><h2 id="高级数据结构知识的掌握：10-20天"><a href="#高级数据结构知识的掌握：10-20天" class="headerlink" title="高级数据结构知识的掌握：10~20天"></a>高级数据结构知识的掌握：10~20天</h2><h4 id="红黑树（记住特性即可）"><a href="#红黑树（记住特性即可）" class="headerlink" title="红黑树（记住特性即可）"></a>红黑树（记住特性即可）</h4><h4 id="B-tree、LSM-tree、跳表、布隆过滤器等等"><a href="#B-tree、LSM-tree、跳表、布隆过滤器等等" class="headerlink" title="B-tree、LSM tree、跳表、布隆过滤器等等"></a>B-tree、LSM tree、跳表、布隆过滤器等等</h4><p>去整理一下大厂常见面试题，刷好面经，整理好简历，一直到大三的寒假，开始投递简历，大三下出去实习，以现在的实力，只要进了面试，基本上不会被刷，去名企。</p><p>实习到7、8月份左右，出来，开始参加秋招，把以前的知识再好好复习一遍，即将开启offer收割之路</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Linux-C-C-后端应届工程师&quot;&gt;&lt;a href=&quot;#Linux-C-C-后端应届工程师&quot; class=&quot;headerlink&quot; title=&quot;Linux C / C++ 后端应届工程师&quot;&gt;&lt;/a&gt;Linux C / C++ 后端应届工程师&lt;/h1&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java 数据结构和算法</title>
    <link href="www.aabigale.top/2020/05/09/Java%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    <id>www.aabigale.top/2020/05/09/Java%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/</id>
    <published>2020-05-09T09:13:24.715Z</published>
    <updated>2020-07-25T13:15:06.520Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-数据结构和算法"><a href="#Java-数据结构和算法" class="headerlink" title="Java 数据结构和算法"></a>Java 数据结构和算法</h1><a id="more"></a><h2 id="稀疏数组"><a href="#稀疏数组" class="headerlink" title="稀疏数组"></a>稀疏数组</h2><h2 id="单向队列"><a href="#单向队列" class="headerlink" title="单向队列"></a>单向队列</h2><h2 id="环形队列"><a href="#环形队列" class="headerlink" title="环形队列"></a>环形队列</h2><h2 id="单向链表"><a href="#单向链表" class="headerlink" title="单向链表"></a>单向链表</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Java-数据结构和算法&quot;&gt;&lt;a href=&quot;#Java-数据结构和算法&quot; class=&quot;headerlink&quot; title=&quot;Java 数据结构和算法&quot;&gt;&lt;/a&gt;Java 数据结构和算法&lt;/h1&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>计算机组成原理</title>
    <link href="www.aabigale.top/2020/05/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    <id>www.aabigale.top/2020/05/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/</id>
    <published>2020-05-09T07:55:58.571Z</published>
    <updated>2020-07-25T13:15:06.557Z</updated>
    
    <content type="html"><![CDATA[<h1 id="计算机组成原理"><a href="#计算机组成原理" class="headerlink" title="计算机组成原理"></a>计算机组成原理</h1><a id="more"></a><p><strong>讲授内容：</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">基本部件的结构与组织方式</span><br><span class="line">基本运算的操作原理</span><br><span class="line">基本部件和单元的设计思想</span><br></pre></td></tr></tbody></table></figure><p><strong>推荐阅读教材：《数字设计和计算机体系结构》</strong></p><h2 id="计算机组成原理之机器"><a href="#计算机组成原理之机器" class="headerlink" title="计算机组成原理之机器"></a>计算机组成原理之机器</h2><h3 id="计算机系统的基本概念-lt-第一章-gt"><a href="#计算机系统的基本概念-lt-第一章-gt" class="headerlink" title="计算机系统的基本概念 <第一章>"></a>计算机系统的基本概念 &lt;第一章&gt;</h3><h4 id="计算机系统简介"><a href="#计算机系统简介" class="headerlink" title="计算机系统简介"></a>计算机系统简介</h4><ul><li><p>计算机的软硬件概念</p><ul><li><p>计算机系统</p><ul><li><p>软件</p><ul><li><p>系统软件：用来管理整个计算机系统</p><p>语言处理程序、操作系统、服务性程序、数据管理系统、网络软件</p></li><li><p>应用软件：按任务需要编制成的各种程序</p></li></ul></li><li><p>硬件</p></li></ul></li></ul></li><li><p>计算机系统的层次结构</p><table><thead><tr><th>高级语言</th><th align="center">虚拟机器 M4</th><th>用编译语言翻译成汇编语言程序</th></tr></thead><tbody><tr><td>汇编语言</td><td align="center">虚拟机器 M3</td><td>用汇编语言翻译成机器语言程序</td></tr><tr><td>操作系统</td><td align="center">虚拟机器 M2</td><td>用机器语言解释操作系统</td></tr><tr><td>机器语言</td><td align="center">实际机器 M1</td><td>用微指令解释机器语言</td></tr><tr><td>微指令系统</td><td align="center">微程序机器 M0</td><td>有硬件直接执行微指令</td></tr></tbody></table></li></ul><ul><li><p>计算机的组成和计算机的体系结构</p><ul><li>计算机体系结构：机器语言程序员所见到的计算机系统的属性</li><li>计算机组成：实现计算机体系结构所体现的属性 （具体指令的实现）</li></ul></li></ul><h4 id="计算机的基本组成"><a href="#计算机的基本组成" class="headerlink" title="计算机的基本组成"></a>计算机的基本组成</h4><ul><li><p>冯若依曼计算机的特点</p><ul><li><p>计算机有五大部件组成：运算器、控制器、存储器、输入设备、输出设备</p></li><li><p>指令和数据以同等地位存于存储器，可按地址寻址</p></li><li><p>指令和数据用二进制表示</p></li><li><p>指令由<strong>操作码和地址码</strong>组成</p></li><li><p>存储程序</p></li><li><p>以运算器为中心</p></li><li><p>冯若依曼计算机硬件框图</p><p><img src="E:%5Cnodejs%5Cnode_global%5Chexo%5Csource_posts%5C%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%5C%E5%86%AF%E8%8B%A5%E4%BE%9D%E6%9B%BC%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A1%AC%E4%BB%B6%E6%A1%86%E5%9B%BE.png" alt="冯若依曼计算机硬件框图"></p></li></ul></li><li><p>计算机硬件框图</p><ul><li><p>以存储器为中心的计算机硬件框图</p><p><img src="E:%5Cnodejs%5Cnode_global%5Chexo%5Csource_posts%5C%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%5C%E4%BB%A5%E5%AD%98%E5%82%A8%E5%99%A8%E4%B8%BA%E4%B8%AD%E5%BF%83%E7%9A%84%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A1%AC%E4%BB%B6%E6%A1%86%E5%9B%BE.png" alt="以存储器为中心的计算机硬件框图"></p></li><li><p>现代计算机硬件框图</p><ul><li><p>主机</p><ul><li>CPU<ul><li>运算器   ALU</li><li>控制器   CU</li></ul></li><li>存储器：主存、辅存</li></ul></li><li><p>I/O设备</p><ul><li>输入设备</li><li>输出设备</li></ul><p>现代计算机硬件框图</p></li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">系统复杂性管理的方法-2（3'Y）</span><br><span class="line"> - 层次化：将被设计的系统划分为多个模块或子模块</span><br><span class="line"> - 模块化：有明确定义的功能和接口</span><br><span class="line"> - 规则性：模块更容易被重用</span><br></pre></td></tr></tbody></table></figure></li></ul></li><li><p>用计算机解决问题的工作步骤</p><ul><li><p>上机前的准备</p><ul><li>建立数学模型</li><li>确定计算方法</li><li>编写解题步骤</li></ul></li><li><p>存储器的基本组成</p><p>​    <img src="E:%5Cnodejs%5Cnode_global%5Chexo%5Csource_posts%5C%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%5C%E5%AD%98%E5%82%A8%E5%99%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%BB%84%E6%88%90.png" alt="存储器的基本组成"></p><ul><li>MAR：存储器地址寄存器（保存了存储单元的地址或编号）反映存储单元的个数</li><li>MDR：存储器数据寄存器，反映存储字长</li></ul></li><li><p>运算器的基本结构和操作过程</p><p><img src="E:%5Cnodejs%5Cnode_global%5Chexo%5Csource_posts%5C%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%5C%E8%BF%90%E7%AE%97%E5%99%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%BB%84%E6%88%90%E5%8F%8A%E6%93%8D%E4%BD%9C%E8%BF%87%E7%A8%8B.png" alt="运算器的基本组成及操作过程"></p><ul><li>加法操作过程</li><li>减法操作过程</li><li>乘法操作过程</li><li>除法操作过程</li></ul></li><li><p>控制器的基本结构</p><ul><li><p>功能</p><ul><li>解释指令</li><li>保证指令有序执行</li></ul></li><li><p>组成</p><p><img src="E:%5Cnodejs%5Cnode_global%5Chexo%5Csource_posts%5C%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%5C%E6%8E%A7%E5%88%B6%E5%99%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%BB%84%E6%88%90.png" alt="控制器的基本组成"></p></li></ul></li><li><p>主机完成一条指令的过程（以取数指令为例）</p><p><img src="E:%5Cnodejs%5Cnode_global%5Chexo%5Csource_posts%5C%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%5C%E4%B8%BB%E6%9C%BA%E5%AE%8C%E6%88%90%E4%B8%80%E6%9D%A1%E6%8C%87%E4%BB%A4%E7%9A%84%E8%BF%87%E7%A8%8B%EF%BC%88%E5%8F%96%E6%95%B0%E4%B8%BA%E4%BE%8B%EF%BC%89.png" alt="主机完成一条指令的过程（取数为例）"></p><p>取指令：PC –&gt; MAR –&gt; M –&gt; MDR –&gt; IR , (PC) + 1 –&gt; PC</p><p>分析指令：OP(IR) –&gt; CU</p><p>执行指令：Ad(IR) –&gt; MAR –&gt; M –&gt;MDR –&gt;ACC</p></li></ul></li></ul><h4 id="计算机硬件的主要技术指标"><a href="#计算机硬件的主要技术指标" class="headerlink" title="计算机硬件的主要技术指标"></a>计算机硬件的主要技术指标</h4><h3 id="总线-lt-第三章-gt"><a href="#总线-lt-第三章-gt" class="headerlink" title="总线 <第三章>"></a>总线 &lt;第三章&gt;</h3><h3 id="存储器-lt-第四章-gt"><a href="#存储器-lt-第四章-gt" class="headerlink" title="存储器 <第四章>"></a>存储器 &lt;第四章&gt;</h3><h3 id="输入输出系统-lt-第五章-gt"><a href="#输入输出系统-lt-第五章-gt" class="headerlink" title="输入输出系统<第五章>"></a>输入输出系统&lt;第五章&gt;</h3><h2 id="计算机组成原理之数字"><a href="#计算机组成原理之数字" class="headerlink" title="计算机组成原理之数字"></a>计算机组成原理之数字</h2><h3 id="计算机中数的表示"><a href="#计算机中数的表示" class="headerlink" title="计算机中数的表示"></a>计算机中数的表示</h3><h3 id="计算机的运算方法和运算器-lt-第六章-gt"><a href="#计算机的运算方法和运算器-lt-第六章-gt" class="headerlink" title="计算机的运算方法和运算器 <第六章>"></a>计算机的运算方法和运算器 &lt;第六章&gt;</h3><h2 id="计算机组成原理之CPU"><a href="#计算机组成原理之CPU" class="headerlink" title="计算机组成原理之CPU"></a>计算机组成原理之CPU</h2><h3 id="指令系统-lt-第七章-gt"><a href="#指令系统-lt-第七章-gt" class="headerlink" title="指令系统 <第七章>"></a>指令系统 &lt;第七章&gt;</h3><h3 id="CPU的结构和功能-lt-第八章-gt"><a href="#CPU的结构和功能-lt-第八章-gt" class="headerlink" title="CPU的结构和功能 <第八章>"></a>CPU的结构和功能 &lt;第八章&gt;</h3><h3 id="控制单元-lt-第九章-gt"><a href="#控制单元-lt-第九章-gt" class="headerlink" title="控制单元 <第九章>"></a>控制单元 &lt;第九章&gt;</h3><h4 id="操作命令的分析"><a href="#操作命令的分析" class="headerlink" title="操作命令的分析"></a>操作命令的分析</h4><h4 id="控制单元的功能"><a href="#控制单元的功能" class="headerlink" title="控制单元的功能"></a>控制单元的功能</h4><h3 id="控制单元的设计-lt-第十章-gt"><a href="#控制单元的设计-lt-第十章-gt" class="headerlink" title="控制单元的设计 <第十章>"></a>控制单元的设计 &lt;第十章&gt;</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;计算机组成原理&quot;&gt;&lt;a href=&quot;#计算机组成原理&quot; class=&quot;headerlink&quot; title=&quot;计算机组成原理&quot;&gt;&lt;/a&gt;计算机组成原理&lt;/h1&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>数据库系统概述三</title>
    <link href="www.aabigale.top/2020/04/23/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0%E4%B8%89/"/>
    <id>www.aabigale.top/2020/04/23/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0%E4%B8%89/</id>
    <published>2020-04-23T03:16:12.370Z</published>
    <updated>2020-07-25T13:15:06.553Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据库系统概述三"><a href="#数据库系统概述三" class="headerlink" title="数据库系统概述三"></a>数据库系统概述三</h1><a id="more"></a><h2 id="数据库管理系统的实现技术"><a href="#数据库管理系统的实现技术" class="headerlink" title="数据库管理系统的实现技术"></a>数据库管理系统的实现技术</h2><h3 id="第七章-数据库存储与索引技术"><a href="#第七章-数据库存储与索引技术" class="headerlink" title="第七章 数据库存储与索引技术"></a>第七章 数据库存储与索引技术</h3><h4 id="第十七讲—数据库物理存储"><a href="#第十七讲—数据库物理存储" class="headerlink" title="第十七讲—数据库物理存储"></a>第十七讲—数据库物理存储</h4><h4 id="第十八讲—数据库索引技术"><a href="#第十八讲—数据库索引技术" class="headerlink" title="第十八讲—数据库索引技术"></a>第十八讲—数据库索引技术</h4><h3 id="第八章-数据库基本操作的实现算法"><a href="#第八章-数据库基本操作的实现算法" class="headerlink" title="第八章 数据库基本操作的实现算法"></a>第八章 数据库基本操作的实现算法</h3><h4 id="第十九讲—数据库查询实现算法I一趟扫描算法"><a href="#第十九讲—数据库查询实现算法I一趟扫描算法" class="headerlink" title="第十九讲—数据库查询实现算法I一趟扫描算法"></a>第十九讲—数据库查询实现算法I一趟扫描算法</h4><h4 id="第二十讲—数据库查询实现算法II二趟扫描算法"><a href="#第二十讲—数据库查询实现算法II二趟扫描算法" class="headerlink" title="第二十讲—数据库查询实现算法II二趟扫描算法"></a>第二十讲—数据库查询实现算法II二趟扫描算法</h4><h3 id="第九章-数据库查询优化与查询实现"><a href="#第九章-数据库查询优化与查询实现" class="headerlink" title="第九章 数据库查询优化与查询实现"></a>第九章 数据库查询优化与查询实现</h3><h4 id="第二十一讲—数据库查询优化技术"><a href="#第二十一讲—数据库查询优化技术" class="headerlink" title="第二十一讲—数据库查询优化技术"></a>第二十一讲—数据库查询优化技术</h4><h3 id="第十章-数据库事务处理"><a href="#第十章-数据库事务处理" class="headerlink" title="第十章 数据库事务处理"></a>第十章 数据库事务处理</h3><h4 id="第二十二讲—数据库事务处理技术-并发控制"><a href="#第二十二讲—数据库事务处理技术-并发控制" class="headerlink" title="第二十二讲—数据库事务处理技术-并发控制"></a>第二十二讲—数据库事务处理技术-并发控制</h4><h4 id="第二十三讲—数据库事务处理技术-并发控制"><a href="#第二十三讲—数据库事务处理技术-并发控制" class="headerlink" title="第二十三讲—数据库事务处理技术-并发控制"></a>第二十三讲—数据库事务处理技术-并发控制</h4><h2 id="课程总结"><a href="#课程总结" class="headerlink" title="课程总结"></a>课程总结</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;数据库系统概述三&quot;&gt;&lt;a href=&quot;#数据库系统概述三&quot; class=&quot;headerlink&quot; title=&quot;数据库系统概述三&quot;&gt;&lt;/a&gt;数据库系统概述三&lt;/h1&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java学习之高级篇</title>
    <link href="www.aabigale.top/2020/04/17/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%AB%98%E7%BA%A7%E7%AF%87/"/>
    <id>www.aabigale.top/2020/04/17/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%AB%98%E7%BA%A7%E7%AF%87/</id>
    <published>2020-04-17T12:18:51.793Z</published>
    <updated>2020-04-18T02:54:06.193Z</updated>
    
    <content type="html"><![CDATA[<h1 id="高级篇"><a href="#高级篇" class="headerlink" title="高级篇"></a>高级篇</h1><a id="more"></a><h2 id="新技术"><a href="#新技术" class="headerlink" title="新技术"></a>新技术</h2><h3 id="Java-9"><a href="#Java-9" class="headerlink" title="Java 9"></a>Java 9</h3><ul><li>Jigsaw</li><li>Jshell</li><li>Reactive Streams</li></ul><h3 id="Java-10"><a href="#Java-10" class="headerlink" title="Java 10"></a>Java 10</h3><ul><li>局部变量类型推断</li><li>G1的并行Full GC</li><li>ThreadLocal握手机制</li></ul><h3 id="Java-11"><a href="#Java-11" class="headerlink" title="Java 11"></a>Java 11</h3><ul><li>ZGC</li><li>Epsilon</li><li>增强var</li></ul><h3 id="Java-12"><a href="#Java-12" class="headerlink" title="Java 12"></a>Java 12</h3><ul><li>Switch 表达式</li></ul><h3 id="Java-13"><a href="#Java-13" class="headerlink" title="Java 13"></a>Java 13</h3><ul><li>Text Blocks</li><li>Dynamic CDS Archives</li></ul><h3 id="Java-14"><a href="#Java-14" class="headerlink" title="Java 14"></a>Java 14</h3><ul><li>Java打包工具</li><li>更有价值的NullPointerException</li><li>record类型</li></ul><h3 id="Spring-5"><a href="#Spring-5" class="headerlink" title="Spring 5"></a>Spring 5</h3><ul><li>响应式编程</li></ul><h3 id="Spring-Boot-2-0"><a href="#Spring-Boot-2-0" class="headerlink" title="Spring Boot 2.0"></a>Spring Boot 2.0</h3><ul><li>http/2</li><li>http/3</li></ul><h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><h3 id="使用单例"><a href="#使用单例" class="headerlink" title="使用单例"></a>使用单例</h3><h3 id="使用Future模式"><a href="#使用Future模式" class="headerlink" title="使用Future模式"></a>使用Future模式</h3><h3 id="使用线程池"><a href="#使用线程池" class="headerlink" title="使用线程池"></a>使用线程池</h3><h3 id="选择就绪"><a href="#选择就绪" class="headerlink" title="选择就绪"></a>选择就绪</h3><h3 id="减少上下文切换"><a href="#减少上下文切换" class="headerlink" title="减少上下文切换"></a>减少上下文切换</h3><h3 id="减少锁粒度"><a href="#减少锁粒度" class="headerlink" title="减少锁粒度"></a>减少锁粒度</h3><h3 id="数据压缩"><a href="#数据压缩" class="headerlink" title="数据压缩"></a>数据压缩</h3><h3 id="结果缓存"><a href="#结果缓存" class="headerlink" title="结果缓存"></a>结果缓存</h3><h3 id="Stream并行流"><a href="#Stream并行流" class="headerlink" title="Stream并行流"></a>Stream并行流</h3><h3 id="GC调优"><a href="#GC调优" class="headerlink" title="GC调优"></a>GC调优</h3><h3 id="JVM内存分配调优"><a href="#JVM内存分配调优" class="headerlink" title="JVM内存分配调优"></a>JVM内存分配调优</h3><h3 id="SQL调优"><a href="#SQL调优" class="headerlink" title="SQL调优"></a>SQL调优</h3><h2 id="线上问题分析"><a href="#线上问题分析" class="headerlink" title="线上问题分析"></a>线上问题分析</h2><h3 id="dump"><a href="#dump" class="headerlink" title="dump"></a>dump</h3><ul><li>线程Dump</li><li>内存Dump</li><li>gc情况</li></ul><h3 id="dump获取及分析工具"><a href="#dump获取及分析工具" class="headerlink" title="dump获取及分析工具"></a>dump获取及分析工具</h3><ul><li>jstack</li><li>jstat</li><li>jmap</li><li>jhat</li><li>Arthas</li></ul><h3 id="dump分析死锁"><a href="#dump分析死锁" class="headerlink" title="dump分析死锁"></a>dump分析死锁</h3><h3 id="dump分析内存泄露"><a href="#dump分析内存泄露" class="headerlink" title="dump分析内存泄露"></a>dump分析内存泄露</h3><h3 id="自己编写各种outofmemory，stackoverflow程序"><a href="#自己编写各种outofmemory，stackoverflow程序" class="headerlink" title="自己编写各种outofmemory，stackoverflow程序"></a>自己编写各种outofmemory，stackoverflow程序</h3><ul><li>HeapOutOfMemory</li><li>Young OutOfMemory</li><li>MethodArea OutOfMemory</li><li>ConstantPool OutOfMemory</li><li>DirectMemory OutOfMemory</li><li>Stack OutOfMemory Stack OverFlow</li></ul><h3 id="Arthas"><a href="#Arthas" class="headerlink" title="Arthas"></a>Arthas</h3><ul><li>jvm相关</li><li>class/classloader相关</li><li>monitor/watch/trace相关</li><li>options</li><li>管道</li><li>后台异步任务</li></ul><h3 id="常见问题解决思路"><a href="#常见问题解决思路" class="headerlink" title="常见问题解决思路"></a>常见问题解决思路</h3><ul><li>内存溢出</li><li>线程死锁</li><li>类加载冲突</li><li>load飙高</li><li>CPU利用率飙高</li><li>慢SQL</li></ul><h3 id="使用工具尝试解决以下问题，并写下总结"><a href="#使用工具尝试解决以下问题，并写下总结" class="headerlink" title="使用工具尝试解决以下问题，并写下总结"></a>使用工具尝试解决以下问题，并写下总结</h3><ul><li>当一个Java程序响应很慢时如何查找问题</li><li>当一个Java程序频繁FullGC时如何解决问题</li><li>如何查看垃圾回收日志</li><li>当一个Java应用发生OutOfMemory时该如何解决</li><li>如何判断是否出现死锁</li><li>如何判断是否存在内存泄露</li><li>使用Arthas快速排查Spring Boot应用404/401问题</li><li>使用Arthas排查线上应用日志打满问题</li><li>利用Arthas排查Spring Boot应用NoSuchMethodError</li></ul><h2 id="编译原理知识"><a href="#编译原理知识" class="headerlink" title="编译原理知识"></a>编译原理知识</h2><h3 id="编译与反编译"><a href="#编译与反编译" class="headerlink" title="编译与反编译"></a>编译与反编译</h3><h3 id="Java代码的编译与反编译"><a href="#Java代码的编译与反编译" class="headerlink" title="Java代码的编译与反编译"></a>Java代码的编译与反编译</h3><h3 id="Java的反编译工具"><a href="#Java的反编译工具" class="headerlink" title="Java的反编译工具"></a>Java的反编译工具</h3><ul><li>javap</li><li>jad</li><li>CRF</li></ul><h3 id="即时编译器"><a href="#即时编译器" class="headerlink" title="即时编译器"></a>即时编译器</h3><ul><li>编译器优化</li></ul><h2 id="操作系统知识"><a href="#操作系统知识" class="headerlink" title="操作系统知识"></a>操作系统知识</h2><h3 id="Linux的常用命令"><a href="#Linux的常用命令" class="headerlink" title="Linux的常用命令"></a>Linux的常用命令</h3><ul><li>find、grep、ps、cp、move、tar、head、tail、netstat、lsof、tree、wget、curl、ping、ssh、echo、free、top</li></ul><h3 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h3><h3 id="服务器性能指标"><a href="#服务器性能指标" class="headerlink" title="服务器性能指标"></a>服务器性能指标</h3><ul><li>load</li><li>CPU利用率</li><li>内存使用情况</li><li>qps</li><li>rt</li></ul><h3 id="进程同步"><a href="#进程同步" class="headerlink" title="进程同步"></a>进程同步</h3><ul><li>生产者消费者问题</li><li>哲学家就餐问题</li><li>读者写者问题</li></ul><h3 id="缓冲区溢出"><a href="#缓冲区溢出" class="headerlink" title="缓冲区溢出"></a>缓冲区溢出</h3><h3 id="分段和分页"><a href="#分段和分页" class="headerlink" title="分段和分页"></a>分段和分页</h3><h3 id="虚拟内存与主存"><a href="#虚拟内存与主存" class="headerlink" title="虚拟内存与主存"></a>虚拟内存与主存</h3><h3 id="虚拟内存管理"><a href="#虚拟内存管理" class="headerlink" title="虚拟内存管理"></a>虚拟内存管理</h3><h3 id="换页算法"><a href="#换页算法" class="headerlink" title="换页算法"></a>换页算法</h3><h2 id="数据库知识"><a href="#数据库知识" class="headerlink" title="数据库知识"></a>数据库知识</h2><h3 id="MySql-执行引擎"><a href="#MySql-执行引擎" class="headerlink" title="MySql 执行引擎"></a>MySql 执行引擎</h3><h3 id="MySQL-执行计划"><a href="#MySQL-执行计划" class="headerlink" title="MySQL 执行计划"></a>MySQL 执行计划</h3><ul><li>如何查看执行计划</li><li>如何根据执行计划进行SQL优化</li></ul><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><ul><li>Hash索引&amp;B树索引</li><li>普通索引&amp;唯一索引</li><li>聚集索引&amp;非聚集索引</li><li>覆盖索引</li><li>最左前缀原则</li><li>索引下推</li><li>索引失效</li></ul><h3 id="回表"><a href="#回表" class="headerlink" title="回表"></a>回表</h3><h3 id="SQL优化"><a href="#SQL优化" class="headerlink" title="SQL优化"></a>SQL优化</h3><h3 id="数据库事务和隔离级别"><a href="#数据库事务和隔离级别" class="headerlink" title="数据库事务和隔离级别"></a>数据库事务和隔离级别</h3><ul><li>事务的ACID</li><li>事务的隔离级别与读现象</li><li>事务能不能实现锁的功能</li></ul><h3 id="编码方式"><a href="#编码方式" class="headerlink" title="编码方式"></a>编码方式</h3><ul><li>utf8</li><li>utf8mb4</li><li>为什么不要在数据库中使用utf8编码</li></ul><h3 id="行数统计"><a href="#行数统计" class="headerlink" title="行数统计"></a>行数统计</h3><ul><li>count(1)、count(*)、count(字段)的区别</li><li>为什么建议使用count(*)</li></ul><h3 id="数据库锁"><a href="#数据库锁" class="headerlink" title="数据库锁"></a>数据库锁</h3><ul><li>共享锁、排它锁</li><li>行锁、表锁</li><li>乐观锁、悲观锁</li><li>使用数据库锁实现乐观锁</li><li>Gap Lock、Next-Key Lock</li></ul><h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><ul><li>内连接</li><li>左连接</li><li>右连接</li></ul><h3 id="数据库主备搭建"><a href="#数据库主备搭建" class="headerlink" title="数据库主备搭建"></a>数据库主备搭建</h3><h3 id="log"><a href="#log" class="headerlink" title="log"></a>log</h3><ul><li>binlog</li><li>redolog</li></ul><h3 id="内存数据库"><a href="#内存数据库" class="headerlink" title="内存数据库"></a>内存数据库</h3><ul><li>h2</li></ul><h3 id="分库分表"><a href="#分库分表" class="headerlink" title="分库分表"></a>分库分表</h3><h3 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h3><h3 id="常用的nosql数据库"><a href="#常用的nosql数据库" class="headerlink" title="常用的nosql数据库"></a>常用的nosql数据库</h3><ul><li>redis</li><li>memcached</li></ul><h3 id="分别使用数据库锁、NoSql实现分布式锁"><a href="#分别使用数据库锁、NoSql实现分布式锁" class="headerlink" title="分别使用数据库锁、NoSql实现分布式锁"></a>分别使用数据库锁、NoSql实现分布式锁</h3><h3 id="性能调优"><a href="#性能调优" class="headerlink" title="性能调优"></a>性能调优</h3><h3 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h3><h2 id="数据结构与算法知识"><a href="#数据结构与算法知识" class="headerlink" title="数据结构与算法知识"></a>数据结构与算法知识</h2><h3 id="简单的数据结构"><a href="#简单的数据结构" class="headerlink" title="简单的数据结构"></a>简单的数据结构</h3><ul><li>栈</li><li>队列</li><li>链表</li><li>数组</li><li>哈希表</li><li>栈和队列的相同和不同之处</li><li>栈通常采用的两种存储结构</li><li>两个栈实现队列，和两个队列实现栈</li></ul><h3 id="树"><a href="#树" class="headerlink" title="树"></a>树</h3><ul><li>二叉树</li><li>字典树</li><li>平衡树</li><li>排序树</li><li>B树</li><li>B+树</li><li>R树</li><li>多路树</li><li>红黑树</li></ul><h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><ul><li>大根堆</li><li>小根堆</li></ul><h3 id="图"><a href="#图" class="headerlink" title="图"></a>图</h3><ul><li>有向图</li><li>无向图</li><li>拓扑</li></ul><h3 id="稳定的排序算法"><a href="#稳定的排序算法" class="headerlink" title="稳定的排序算法"></a>稳定的排序算法</h3><ul><li>冒泡排序</li><li>插入排序</li><li>鸡尾酒排序</li><li>桶排序</li><li>计数排序</li><li>归并排序</li><li>原地归并排序</li><li>二叉排序树排序</li><li>鸽巢排序</li><li>基数排序</li><li>侏儒排序</li><li>图书馆排序</li><li>块排序</li></ul><h3 id="不稳定的排序算法"><a href="#不稳定的排序算法" class="headerlink" title="不稳定的排序算法"></a>不稳定的排序算法</h3><ul><li>选择排序</li><li>希尔排序</li><li>Clover排序算法</li><li>梳排序</li><li>堆排序</li><li>平滑排序</li><li>快速排序</li><li>内省排序</li><li>耐心排序</li></ul><h3 id="各种排序算法和时间复杂度"><a href="#各种排序算法和时间复杂度" class="headerlink" title="各种排序算法和时间复杂度"></a>各种排序算法和时间复杂度</h3><h3 id="深度优先和广度优先搜索"><a href="#深度优先和广度优先搜索" class="headerlink" title="深度优先和广度优先搜索"></a>深度优先和广度优先搜索</h3><h3 id="全排列"><a href="#全排列" class="headerlink" title="全排列"></a>全排列</h3><h3 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h3><h3 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h3><h3 id="hash算法"><a href="#hash算法" class="headerlink" title="hash算法"></a>hash算法</h3><h3 id="海量数据处理"><a href="#海量数据处理" class="headerlink" title="海量数据处理"></a>海量数据处理</h3><ul><li>分治</li><li>hash映射</li><li>堆排序</li><li>双层桶划分</li><li>Bloom Filter</li><li>bitmap</li><li>数据库索引</li><li>mapreduce等。</li></ul><h2 id="大数据知识"><a href="#大数据知识" class="headerlink" title="大数据知识"></a>大数据知识</h2><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><ul><li>Solr</li><li>Lucene</li><li>ElasticSearch</li></ul><h3 id="流式计算"><a href="#流式计算" class="headerlink" title="流式计算"></a>流式计算</h3><ul><li>Storm</li><li>Spark</li><li>Flink</li></ul><h3 id="Hadoop，离线计算"><a href="#Hadoop，离线计算" class="headerlink" title="Hadoop，离线计算"></a>Hadoop，离线计算</h3><ul><li>HDFS</li><li>MapReduce</li></ul><h3 id="分布式日志收集"><a href="#分布式日志收集" class="headerlink" title="分布式日志收集"></a>分布式日志收集</h3><ul><li>flume</li><li>kafka</li><li>logstash</li></ul><h3 id="数据挖掘"><a href="#数据挖掘" class="headerlink" title="数据挖掘"></a>数据挖掘</h3><ul><li>mahout</li></ul><h2 id="网络安全知识"><a href="#网络安全知识" class="headerlink" title="网络安全知识"></a>网络安全知识</h2><h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><ul><li>XSS的防御</li></ul><h3 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h3><h3 id="注入攻击"><a href="#注入攻击" class="headerlink" title="注入攻击"></a>注入攻击</h3><ul><li>SQL注入</li><li>XML注入</li><li>CRLF注入</li></ul><h3 id="文件上传漏洞"><a href="#文件上传漏洞" class="headerlink" title="文件上传漏洞"></a>文件上传漏洞</h3><h3 id="加密与解密"><a href="#加密与解密" class="headerlink" title="加密与解密"></a>加密与解密</h3><ul><li>对称加密</li><li>非对称加密</li><li>哈希算法</li><li>加盐哈希算法</li></ul><h3 id="加密算法"><a href="#加密算法" class="headerlink" title="加密算法"></a>加密算法</h3><ul><li>MD5，SHA1、DES、AES、RSA、DSA</li></ul><h3 id="彩虹表"><a href="#彩虹表" class="headerlink" title="彩虹表"></a>彩虹表</h3><h3 id="DDOS攻击"><a href="#DDOS攻击" class="headerlink" title="DDOS攻击"></a>DDOS攻击</h3><h3 id="DOS攻击"><a href="#DOS攻击" class="headerlink" title="DOS攻击"></a>DOS攻击</h3><h3 id="DDOS攻击-1"><a href="#DDOS攻击-1" class="headerlink" title="DDOS攻击"></a>DDOS攻击</h3><h3 id="memcached为什么可以导致DDos攻击"><a href="#memcached为什么可以导致DDos攻击" class="headerlink" title="memcached为什么可以导致DDos攻击"></a>memcached为什么可以导致DDos攻击</h3><h3 id="什么是反射型DDoS"><a href="#什么是反射型DDoS" class="headerlink" title="什么是反射型DDoS"></a>什么是反射型DDoS</h3><h3 id="如何通过Hash碰撞进行DOS攻击"><a href="#如何通过Hash碰撞进行DOS攻击" class="headerlink" title="如何通过Hash碰撞进行DOS攻击"></a>如何通过Hash碰撞进行DOS攻击</h3><h3 id="SSL、TLS，HTTPS"><a href="#SSL、TLS，HTTPS" class="headerlink" title="SSL、TLS，HTTPS"></a>SSL、TLS，HTTPS</h3><h3 id="脱库、洗库、撞库"><a href="#脱库、洗库、撞库" class="headerlink" title="脱库、洗库、撞库"></a>脱库、洗库、撞库</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;高级篇&quot;&gt;&lt;a href=&quot;#高级篇&quot; class=&quot;headerlink&quot; title=&quot;高级篇&quot;&gt;&lt;/a&gt;高级篇&lt;/h1&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java学习之进阶篇</title>
    <link href="www.aabigale.top/2020/04/17/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%BF%9B%E9%98%B6%E7%AF%87/"/>
    <id>www.aabigale.top/2020/04/17/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%BF%9B%E9%98%B6%E7%AF%87/</id>
    <published>2020-04-17T12:04:26.505Z</published>
    <updated>2020-04-18T02:54:06.189Z</updated>
    
    <content type="html"><![CDATA[<h1 id="进阶篇"><a href="#进阶篇" class="headerlink" title="进阶篇"></a>进阶篇</h1><a id="more"></a><h2 id="Java底层知识"><a href="#Java底层知识" class="headerlink" title="Java底层知识"></a>Java底层知识</h2><h3 id="字节码"><a href="#字节码" class="headerlink" title="字节码"></a>字节码</h3><h3 id="class文件格式"><a href="#class文件格式" class="headerlink" title="class文件格式"></a>class文件格式</h3><h3 id="CAFEBABE"><a href="#CAFEBABE" class="headerlink" title="CAFEBABE"></a>CAFEBABE</h3><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><h3 id="用位运算实现加、减、乘、除、取余"><a href="#用位运算实现加、减、乘、除、取余" class="headerlink" title="用位运算实现加、减、乘、除、取余"></a>用位运算实现加、减、乘、除、取余</h3><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><h3 id="设计模式的六大原则"><a href="#设计模式的六大原则" class="headerlink" title="设计模式的六大原则"></a>设计模式的六大原则</h3><ul><li>开闭原则（Open Close Principle）</li><li>里氏代换原则（Liskov Substitution Principle）</li><li>依赖倒转原则（Dependence Inversion Principle）</li><li>接口隔离原则（Interface Segregation Principle）</li><li>迪米特法则（最少知道原则）（Demeter Principle）</li><li>合成复用原则（Composite Reuse Principle）</li></ul><h3 id="创建型设计模式"><a href="#创建型设计模式" class="headerlink" title="创建型设计模式"></a>创建型设计模式</h3><ul><li>单例模式</li><li>抽象工厂模式</li><li>建造者模式</li><li>工厂模式</li><li>原型模式</li></ul><h3 id="结构型设计模式"><a href="#结构型设计模式" class="headerlink" title="结构型设计模式"></a>结构型设计模式</h3><ul><li>适配器模式</li><li>桥接模式</li><li>装饰模式</li><li>组合模式</li><li>外观模式</li><li>享元模式</li><li>代理模式</li></ul><h3 id="行为型设计模式"><a href="#行为型设计模式" class="headerlink" title="行为型设计模式"></a>行为型设计模式</h3><ul><li>模版方法模式</li><li>命令模式</li><li>迭代器模式</li><li>观察者模式</li><li>中介者模式</li><li>备忘录模式</li><li>解释器模式</li><li>状态模式</li><li>策略模式</li><li>责任链模式</li><li>访问者模式</li></ul><h3 id="单例的七种写法"><a href="#单例的七种写法" class="headerlink" title="单例的七种写法"></a>单例的七种写法</h3><ul><li>懒汉——线程不安全</li><li>懒汉——线程安全</li><li>饿汉</li><li>饿汉——变种</li><li>静态内部类</li><li>枚举</li><li>双重校验锁</li></ul><h3 id="为什么推荐使用枚举实现单例？"><a href="#为什么推荐使用枚举实现单例？" class="headerlink" title="为什么推荐使用枚举实现单例？"></a>为什么推荐使用枚举实现单例？</h3><h3 id="三种工厂模式的区别及联系"><a href="#三种工厂模式的区别及联系" class="headerlink" title="三种工厂模式的区别及联系"></a>三种工厂模式的区别及联系</h3><ul><li>简单工厂、工厂方法、模板工厂</li></ul><h3 id="会使用常用设计模式"><a href="#会使用常用设计模式" class="headerlink" title="会使用常用设计模式"></a>会使用常用设计模式</h3><ul><li>工厂模式</li><li>适配器模式</li><li>策略模式</li><li>模板方法模式</li><li>观察者模式</li><li>外观模式</li><li>代理模式</li></ul><h3 id="不用synchronized和lock，实现线程安全的单例模式"><a href="#不用synchronized和lock，实现线程安全的单例模式" class="headerlink" title="不用synchronized和lock，实现线程安全的单例模式"></a>不用synchronized和lock，实现线程安全的单例模式</h3><h3 id="nio和reactor设计模式"><a href="#nio和reactor设计模式" class="headerlink" title="nio和reactor设计模式"></a>nio和reactor设计模式</h3><h3 id="Spring中用到了哪些设计模式"><a href="#Spring中用到了哪些设计模式" class="headerlink" title="Spring中用到了哪些设计模式"></a>Spring中用到了哪些设计模式</h3><h2 id="网络编程知识"><a href="#网络编程知识" class="headerlink" title="网络编程知识"></a>网络编程知识</h2><h3 id="常用协议"><a href="#常用协议" class="headerlink" title="常用协议"></a>常用协议</h3><ul><li>tcp、udp、http、https</li><li>用Java实现FTP、SMTP协议</li></ul><h3 id="OSI七层模型"><a href="#OSI七层模型" class="headerlink" title="OSI七层模型"></a>OSI七层模型</h3><ul><li>每一层的主要协议</li></ul><h3 id="TCP-UDP"><a href="#TCP-UDP" class="headerlink" title="TCP/UDP"></a>TCP/UDP</h3><ul><li>三次握手与四次关闭</li><li>流量控制和拥塞控制</li><li>tcp粘包与拆包</li></ul><h3 id="TCP-IP"><a href="#TCP-IP" class="headerlink" title="TCP/IP"></a>TCP/IP</h3><ul><li>IPV4</li><li>IPV6</li></ul><h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><ul><li>http/1.0 http/1.1 http/2之间的区别</li><li>http和https的区别</li><li>http中 get和post区别</li><li>常见的web请求返回的状态码</li><li>404、302、301、500分别代表什么</li><li>用Java写一个简单的静态文件的HTTP服务器</li></ul><h3 id="http-2"><a href="#http-2" class="headerlink" title="http/2"></a>http/2</h3><h3 id="Java-RMI，Socket，HttpClient"><a href="#Java-RMI，Socket，HttpClient" class="headerlink" title="Java RMI，Socket，HttpClient"></a>Java RMI，Socket，HttpClient</h3><h3 id="cookie-与-session"><a href="#cookie-与-session" class="headerlink" title="cookie 与 session"></a>cookie 与 session</h3><ul><li>cookie被禁用，如何实现session</li></ul><h3 id="了解nginx和apache服务器的特性并搭建一个对应的服务器"><a href="#了解nginx和apache服务器的特性并搭建一个对应的服务器" class="headerlink" title="了解nginx和apache服务器的特性并搭建一个对应的服务器"></a>了解nginx和apache服务器的特性并搭建一个对应的服务器</h3><h3 id="进程间通讯的方式"><a href="#进程间通讯的方式" class="headerlink" title="进程间通讯的方式"></a>进程间通讯的方式</h3><h3 id="什么是CDN？如果实现？"><a href="#什么是CDN？如果实现？" class="headerlink" title="什么是CDN？如果实现？"></a>什么是CDN？如果实现？</h3><h3 id="DNS？"><a href="#DNS？" class="headerlink" title="DNS？"></a>DNS？</h3><ul><li>什么是DNS</li><li>记录类型:A记录、CNAME记录、AAAA记录等</li><li>域名解析</li><li>根域名服务器</li><li>DNS污染</li><li>DNS劫持</li><li>公共DNS：114 DNS、Google DNS、OpenDNS</li></ul><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><ul><li>正向代理</li><li>反向代理</li><li>反向代理服务器</li></ul><h2 id="框架知识"><a href="#框架知识" class="headerlink" title="框架知识"></a>框架知识</h2><h3 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h3><ul><li>生命周期</li><li>线程安全问题</li><li>filter和listener</li><li>web.xml中常用配置及作用</li></ul><h3 id="Hibernate"><a href="#Hibernate" class="headerlink" title="Hibernate"></a>Hibernate</h3><ul><li>什么是OR Mapping</li><li>Hibernate的缓存机制</li><li>Hibernate的懒加载</li><li>Hibernate/Ibatis/MyBatis之间的区别</li></ul><h3 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h3><ul><li>Mybatis缓存机制</li><li><code>#{}</code>和<code>${}</code>的区别</li><li>mapper中传递多个参数</li><li>Mybatis动态sql</li><li>Mybatis的延迟加载</li></ul><h3 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h3><ul><li>Bean的初始化</li><li>AOP原理</li><li>实现Spring的IOC</li><li>spring四种依赖注入方式</li></ul><h3 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h3><ul><li>什么是MVC</li><li>Spring mvc与Struts mvc的区别</li></ul><h3 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h3><ul><li>Spring Boot 2.0</li><li>起步依赖</li><li>自动配置</li><li>Spring Boot的starter原理</li><li>自己实现一个starter</li><li>为什么Spring Boot可以通过main启动web项目</li></ul><h3 id="Spring-Security"><a href="#Spring-Security" class="headerlink" title="Spring Security"></a>Spring Security</h3><h3 id="Spring-Cloud"><a href="#Spring-Cloud" class="headerlink" title="Spring Cloud"></a>Spring Cloud</h3><ul><li>服务发现与注册：Eureka、Zookeeper、Consul</li><li>负载均衡：Feign、Spring Cloud Loadbalance</li><li>服务配置：Spring Cloud Config</li><li>服务限流与熔断：Hystrix</li><li>服务链路追踪：Dapper</li><li>服务网关、安全、消息</li></ul><h2 id="应用服务器知识"><a href="#应用服务器知识" class="headerlink" title="应用服务器知识"></a>应用服务器知识</h2><h3 id="JBoss"><a href="#JBoss" class="headerlink" title="JBoss"></a>JBoss</h3><h3 id="tomcat"><a href="#tomcat" class="headerlink" title="tomcat"></a>tomcat</h3><h3 id="jetty"><a href="#jetty" class="headerlink" title="jetty"></a>jetty</h3><h3 id="Weblogic"><a href="#Weblogic" class="headerlink" title="Weblogic"></a>Weblogic</h3><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><h3 id="git-amp-svn"><a href="#git-amp-svn" class="headerlink" title="git &amp; svn"></a>git &amp; svn</h3><h3 id="maven-amp-gradle"><a href="#maven-amp-gradle" class="headerlink" title="maven &amp; gradle"></a>maven &amp; gradle</h3><h3 id="git技巧"><a href="#git技巧" class="headerlink" title="git技巧"></a>git技巧</h3><ul><li>分支合并</li><li>冲突解决</li><li>提交回滚</li></ul><h3 id="maven技巧"><a href="#maven技巧" class="headerlink" title="maven技巧"></a>maven技巧</h3><ul><li>依赖树</li><li>依赖仲裁</li></ul><h3 id="Intellij-IDEA"><a href="#Intellij-IDEA" class="headerlink" title="Intellij IDEA"></a>Intellij IDEA</h3><ul><li>常用插件：Maven Helper、FindBugs-IDEA、阿里巴巴代码规约检测、GsonFormat、Lombok plugin、.ignore、Mybatis plugin</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;进阶篇&quot;&gt;&lt;a href=&quot;#进阶篇&quot; class=&quot;headerlink&quot; title=&quot;进阶篇&quot;&gt;&lt;/a&gt;进阶篇&lt;/h1&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java学习之底层篇</title>
    <link href="www.aabigale.top/2020/04/17/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%BA%95%E5%B1%82%E7%AF%87/"/>
    <id>www.aabigale.top/2020/04/17/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%BA%95%E5%B1%82%E7%AF%87/</id>
    <published>2020-04-17T11:53:08.718Z</published>
    <updated>2020-04-18T02:54:06.181Z</updated>
    
    <content type="html"><![CDATA[<h1 id="底层篇"><a href="#底层篇" class="headerlink" title="底层篇"></a>底层篇</h1><a id="more"></a><h3 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h3><h4 id="JVM内存结构"><a href="#JVM内存结构" class="headerlink" title="JVM内存结构"></a>JVM内存结构</h4><ul><li>运行时数据区</li><li>运行时数据区哪些是线程独享</li><li>堆和栈区别</li><li>方法区在不同版本JDK中的位置</li><li>堆外内存</li><li>TLAB</li><li><a href="http://hollischuang.gitee.io/tobetopjavaer/?nsukey=RvjaFvLCGPPbjwfwF7XlmqNl09mFjmAUCsru3rF4RjZrjP3y1sovYNNzWc4uLvvXNZVGH5VYcNgRKXca6lQ9M31gH80kzcskWTHY%2BdeAaA%2BE7chi2W7Lpx%2BBa4sSy2GGy4MAIR%2FZYygnD40nwFRgb0h%2BUuTFHNndDfycK3BzLOtbGh4KX0ZQzIJty1n6zz%2B0yN0dk6rdrSREChjhHbQBvA%3D%3D#/basement/jvm/stack-alloc" target="_blank" rel="noopener">Java中的对象一定在堆上分配吗？</a></li></ul><h4 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h4><ul><li>GC算法：标记清除、引用计数、复制、标记压缩、分代回收、增量式回收</li><li>GC参数</li><li>对象存活的判定</li><li>垃圾收集器（CMS、G1、ZGC、Epsilon）</li></ul><h4 id="JVM参数及调优"><a href="#JVM参数及调优" class="headerlink" title="JVM参数及调优"></a>JVM参数及调优</h4><ul><li>-Xmx</li><li>-Xmn</li><li>-Xms</li><li>-Xss</li><li>-XX:SurvivorRatio</li><li>-XX:PermSize</li><li>-XX:MaxPermSize</li><li>-XX:MaxTenuringThreshold</li></ul><h4 id="Java对象模型"><a href="#Java对象模型" class="headerlink" title="Java对象模型"></a>Java对象模型</h4><ul><li>oop-klass</li><li>对象头</li></ul><h4 id="HotSpot"><a href="#HotSpot" class="headerlink" title="HotSpot"></a>HotSpot</h4><ul><li>即时编译器</li><li>编译优化</li></ul><h4 id="Java内存模型"><a href="#Java内存模型" class="headerlink" title="Java内存模型"></a>Java内存模型</h4><ul><li>计算机内存模型</li><li>缓存一致性</li><li>MESI协议</li><li>可见性</li><li>原子性</li><li>顺序性</li><li>happens-before</li><li>as-if-serial</li><li>内存屏障</li><li>synchronized</li><li>volatile</li><li>final</li><li>锁</li></ul><h4 id="虚拟机性能监控与故障处理工具"><a href="#虚拟机性能监控与故障处理工具" class="headerlink" title="虚拟机性能监控与故障处理工具"></a>虚拟机性能监控与故障处理工具</h4><ul><li>jps</li><li>jstack</li><li>jmap</li><li>jstat</li><li>jconsole</li><li>jinfo</li><li>jhat</li><li>javap</li><li>btrace</li><li>TProfiler</li><li>jlink</li><li>Arthas</li></ul><h4 id="类加载机制"><a href="#类加载机制" class="headerlink" title="类加载机制"></a>类加载机制</h4><ul><li>classLoader</li><li>类加载过程是线程安全的吗？</li><li>类加载过程</li><li>双亲委派（破坏双亲委派）</li><li>模块化（jboss modules、osgi、jigsaw）</li></ul><h4 id="打包工具"><a href="#打包工具" class="headerlink" title="打包工具"></a>打包工具</h4><ul><li>jar</li><li>jlink</li><li>jpackage</li></ul><h4 id="编译与反编译"><a href="#编译与反编译" class="headerlink" title="编译与反编译"></a>编译与反编译</h4><ul><li>什么是编译</li><li>什么是反编译</li><li>编译工具：javac</li><li>反编译工具：javap 、jad 、CRF</li></ul><h4 id="JIT"><a href="#JIT" class="headerlink" title="JIT"></a>JIT</h4><ul><li>JIT优化（逃逸分析、栈上分配、标量替换、锁优化）</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;底层篇&quot;&gt;&lt;a href=&quot;#底层篇&quot; class=&quot;headerlink&quot; title=&quot;底层篇&quot;&gt;&lt;/a&gt;底层篇&lt;/h1&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>数据库系统概述二</title>
    <link href="www.aabigale.top/2020/04/10/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0%E4%BA%8C/"/>
    <id>www.aabigale.top/2020/04/10/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0%E4%BA%8C/</id>
    <published>2020-04-10T08:26:01.025Z</published>
    <updated>2020-04-24T08:52:03.834Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据库系统概述二"><a href="#数据库系统概述二" class="headerlink" title="数据库系统概述二"></a>数据库系统概述二</h1><a id="more"></a><h2 id="数据建模与数据库设计"><a href="#数据建模与数据库设计" class="headerlink" title="数据建模与数据库设计"></a>数据建模与数据库设计</h2><h3 id="第五章-数据建模与数据库设计"><a href="#第五章-数据建模与数据库设计" class="headerlink" title="第五章 数据建模与数据库设计"></a>第五章 数据建模与数据库设计</h3><h4 id="第十一讲—数据建模之思想与方法"><a href="#第十一讲—数据建模之思想与方法" class="headerlink" title="第十一讲—数据建模之思想与方法"></a>第十一讲—数据建模之思想与方法</h4><h4 id="第十二讲—数据建模之工程化方法及案例分析"><a href="#第十二讲—数据建模之工程化方法及案例分析" class="headerlink" title="第十二讲—数据建模之工程化方法及案例分析"></a>第十二讲—数据建模之工程化方法及案例分析</h4><h4 id="第十三讲—数据库设计过程"><a href="#第十三讲—数据库设计过程" class="headerlink" title="第十三讲—数据库设计过程"></a>第十三讲—数据库设计过程</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">本讲重难点：</span><br><span class="line">* 理解数据库设计的四个过程 </span><br><span class="line">* 理解不正确数据库设计引发的问题，为数据库理论的学习奠定问题基础 </span><br><span class="line">* 理解不正确数据库设计引发的问题，提升数据建模与数据库设计能力</span><br></pre></td></tr></tbody></table></figure><h5 id="数据库设计过程与方法"><a href="#数据库设计过程与方法" class="headerlink" title="数据库设计过程与方法"></a>数据库设计过程与方法</h5><ul><li><p>数据库设计的四个过程</p><ul><li>需求分析   ——————   收集需求和理解需求，”源”</li><li>概念数据库设计   ———–   建立概念模型。”E-R图 / IDEF1x图”</li><li>逻辑数据库设计   ———–   建立逻辑模型，“关系模式” 包括全局模式和用户模式(外模式)</li><li>物理数据库设计   ———–    建立物理模型，“Create Table” 包括物理数据组织等，依赖于具体的DBMS</li></ul></li><li><p>需求分析</p><ul><li>了解部门-岗位 </li><li>对每一岗位，收 集“源”—形成 源表</li><li>理解每一“源” –源的属性构成 –源的处理规则 –源的属性处理规则</li><li>形成并提交需求 分析报告</li></ul></li><li><p>概念数据库设计</p><ul><li><p>依据需求分析报告</p></li><li><p>识别实体与联系</p><ul><li><p>局部 E-R 模式设计</p><p>需求分析的”源” → 确定局部结构范围 → 实体定义 → 联系定义 → 属性分配 → 全局 E-R 模式设计</p></li><li><p>全局 E-R 模式设计</p><p>局部E-R模式 → 确定公共实体类型 → 合并两个局部E-R模式 → 检查并消除冲突 → 还有未合并的 局部模式？&lt; 有的话  继续合并 &gt; → 全局E-R模式优化</p><ul><li><p>消除冲突</p><ul><li><p>属性冲突 </p><p>–属性域的冲突：属性的类型、取值范围不同 *<em>如不同学校的学号编码方式不同 *</em></p><p>–属性取值单位冲突 <strong>如重量分别采用磅、千克</strong></p></li><li><p>结构冲突</p><p> –同一对象在不同应用中的抽象不同 *<em>如职工在某应用中是实体，在另一应用中则抽象为属性 *</em></p><p>–同一实体在不同E-R图中属性组成不同</p><p> –实体之间的联系在不同E-R图中呈现不同的类</p></li><li><p>命名冲突 </p><p>–同名异义：不同意义的对象具有相同的名字 </p><p>–异名同义：同一意义的对象具有不同的名字 </p></li></ul></li></ul></li></ul></li></ul></li></ul><pre><code>  * 结构冲突   * 命名冲突 * </code></pre><ul><li><p>绘制E-R图 / IDEF1x图用图表达业务规则</p></li><li><p>定义实体、联系及实体的属性构成</p></li><li><p>形成并提交概念 数据库设计报告</p></li></ul><ul><li><h5 id="E-R图-IDEF1X向关系模式的转换"><a href="#E-R图-IDEF1X向关系模式的转换" class="headerlink" title="E-R图/IDEF1X向关系模式的转换"></a>E-R图/IDEF1X向关系模式的转换</h5></li></ul><h5 id="不正确数据库设计引发的问题及其解决"><a href="#不正确数据库设计引发的问题及其解决" class="headerlink" title="不正确数据库设计引发的问题及其解决"></a>不正确数据库设计引发的问题及其解决</h5><h3 id="第六章-数据库设计理论"><a href="#第六章-数据库设计理论" class="headerlink" title="第六章 数据库设计理论"></a>第六章 数据库设计理论</h3><h4 id="第十四讲—函数依赖及其公理定理"><a href="#第十四讲—函数依赖及其公理定理" class="headerlink" title="第十四讲—函数依赖及其公理定理"></a>第十四讲—函数依赖及其公理定理</h4><h4 id="第十五讲—关系模式设计之规范化形式"><a href="#第十五讲—关系模式设计之规范化形式" class="headerlink" title="第十五讲—关系模式设计之规范化形式"></a>第十五讲—关系模式设计之规范化形式</h4><h4 id="第十六讲—模式分解存在的问题及解决"><a href="#第十六讲—模式分解存在的问题及解决" class="headerlink" title="第十六讲—模式分解存在的问题及解决"></a>第十六讲—模式分解存在的问题及解决</h4><h2 id=""><a href="#" class="headerlink" title=""></a></h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;数据库系统概述二&quot;&gt;&lt;a href=&quot;#数据库系统概述二&quot; class=&quot;headerlink&quot; title=&quot;数据库系统概述二&quot;&gt;&lt;/a&gt;数据库系统概述二&lt;/h1&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>JAVA实训作业</title>
    <link href="www.aabigale.top/2020/04/09/JAVA%E5%AE%9E%E8%AE%AD%E4%BD%9C%E4%B8%9A/"/>
    <id>www.aabigale.top/2020/04/09/JAVA%E5%AE%9E%E8%AE%AD%E4%BD%9C%E4%B8%9A/</id>
    <published>2020-04-09T07:59:31.340Z</published>
    <updated>2020-04-12T05:46:52.794Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JAVA实训作业"><a href="#JAVA实训作业" class="headerlink" title="JAVA实训作业"></a>JAVA实训作业</h1><a id="more"></a><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JAVA实训作业&quot;&gt;&lt;a href=&quot;#JAVA实训作业&quot; class=&quot;headerlink&quot; title=&quot;JAVA实训作业&quot;&gt;&lt;/a&gt;JAVA实训作业&lt;/h1&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>前端之CSS</title>
    <link href="www.aabigale.top/2020/04/07/%E5%89%8D%E7%AB%AF%E4%B9%8BCSS/"/>
    <id>www.aabigale.top/2020/04/07/%E5%89%8D%E7%AB%AF%E4%B9%8BCSS/</id>
    <published>2020-04-07T06:02:28.960Z</published>
    <updated>2020-04-28T09:54:57.043Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端之CSS"><a href="#前端之CSS" class="headerlink" title="前端之CSS"></a>前端之CSS</h1><a id="more"></a><h2 id="CSS-和-文档"><a href="#CSS-和-文档" class="headerlink" title="CSS 和 文档"></a>CSS 和 文档</h2><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><h3 id="常用选择器"><a href="#常用选择器" class="headerlink" title="常用选择器"></a>常用选择器</h3><ul><li><p>元素选择器</p><ul><li>作用：根据标签名选中指定元素</li><li>语法：标签名{ }</li><li>例子：p{ }   h1{ }  div{ }</li></ul></li><li><p>id 选择器</p><ul><li>作用：根据元素的id的属性值选中一个元素</li><li>语法：#id属性值{ }</li><li>例子：#box{ } #red{ }</li></ul></li><li><p>类选择器</p><ul><li>作用：<ul><li>根据元素的class属性值选中一组元素</li><li>class 可以同时为一个元素指定多个 class 属性</li></ul></li><li>语法：.class属性值{ }</li><li>例子：.blue{ }</li></ul></li><li><p>通配选择器</p><ul><li>作用选中页面中的所有元素</li><li>语法：*{ }</li></ul></li></ul><h3 id="复合选择器"><a href="#复合选择器" class="headerlink" title="复合选择器"></a>复合选择器</h3><ul><li>交集选择器<ul><li>作用：选中同时复合多个条件的元素</li><li>语法：选择器1选择器2…….选择器n{ }</li><li>注意点：交集选择器中如果有元素选择器，必须使用元素选择器开头</li></ul></li><li>并集选择器<ul><li>作用：同时选中多个选择器对应的元素</li><li>语法：选择器1,选择器2,选择器3,……,选择器n{ }</li></ul></li></ul><h3 id="关系选择器"><a href="#关系选择器" class="headerlink" title="关系选择器"></a>关系选择器</h3><h3 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h3><h3 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前端之CSS&quot;&gt;&lt;a href=&quot;#前端之CSS&quot; class=&quot;headerlink&quot; title=&quot;前端之CSS&quot;&gt;&lt;/a&gt;前端之CSS&lt;/h1&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>在vscode中配置Java环境</title>
    <link href="www.aabigale.top/2020/04/07/%E5%9C%A8vscode%E4%B8%AD%E9%85%8D%E7%BD%AEJava%E7%8E%AF%E5%A2%83/"/>
    <id>www.aabigale.top/2020/04/07/%E5%9C%A8vscode%E4%B8%AD%E9%85%8D%E7%BD%AEJava%E7%8E%AF%E5%A2%83/</id>
    <published>2020-04-07T05:19:19.431Z</published>
    <updated>2020-04-08T11:53:19.819Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在vscode中配置Java环境"><a href="#在vscode中配置Java环境" class="headerlink" title="在vscode中配置Java环境"></a>在vscode中配置Java环境</h1><a id="more"></a><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>官网下载</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="配置中文"><a href="#配置中文" class="headerlink" title="配置中文"></a>配置中文</h3><ul><li>点击旁边的 Extensions</li><li>搜索框编辑 Chinese </li><li>下载 Chinese ( Simplified )</li></ul><h3 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h3><p>​            可以看自己喜好</p><h3 id="下载关于编辑-Java-的插件"><a href="#下载关于编辑-Java-的插件" class="headerlink" title="下载关于编辑 Java 的插件"></a>下载关于编辑 Java 的插件</h3><p>​     </p><ul><li><p>便于编辑而安装的插件</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Beautify：代码高亮</span><br><span class="line">Terminal：直接唤起终端</span><br><span class="line">Project Manager：多个项目切换</span><br><span class="line">Auto Close Tag：标签自动闭合</span><br><span class="line">Eclipse Keymap：可以通过一些快捷键更方便地编写Java</span><br></pre></td></tr></tbody></table></figure></li><li><p>配置 Java 环境而安装的插件</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Language Support for Java(TM) by Red Hat 运行 Java 代码的</span><br><span class="line">Debugger for Java 调试 Java 程序</span><br><span class="line">Java Test Runner 测试 Java 程序</span><br><span class="line">Maven for Java Java环境下构建应用程序的软件</span><br></pre></td></tr></tbody></table></figure></li></ul><h2 id="设置工作环境"><a href="#设置工作环境" class="headerlink" title="设置工作环境"></a>设置工作环境</h2><ul><li>点击菜单 File( 文件 ) –&gt; Save Workspace As····( 将工作区另存为)····</li><li>将新建的 ( 文件名 ) 文件添加至工作区</li></ul><h2 id="新建-Java-项目"><a href="#新建-Java-项目" class="headerlink" title="新建 Java 项目"></a>新建 Java 项目</h2><ul><li>在工作区点击菜单栏 View ( 查看 ) –&gt; command Palette ( 命令面板)</li><li>输入Java，选择Java : Create Java Project，新建Java项目 </li><li>在弹出的框中，选择<strong>工作空间文件夹</strong></li><li>接着输入项目名称，回车</li><li>会自动生成一段打印hello Java代码</li><li>编译运行</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;在vscode中配置Java环境&quot;&gt;&lt;a href=&quot;#在vscode中配置Java环境&quot; class=&quot;headerlink&quot; title=&quot;在vscode中配置Java环境&quot;&gt;&lt;/a&gt;在vscode中配置Java环境&lt;/h1&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>html</title>
    <link href="www.aabigale.top/2020/04/06/html/"/>
    <id>www.aabigale.top/2020/04/06/html/</id>
    <published>2020-04-06T13:59:36.547Z</published>
    <updated>2020-04-08T11:53:19.803Z</updated>
    
    <content type="html"><![CDATA[<h1 id="web前端开发最佳实践"><a href="#web前端开发最佳实践" class="headerlink" title="web前端开发最佳实践"></a>web前端开发最佳实践</h1><a id="more"></a><h2 id="高效web前端开发综述"><a href="#高效web前端开发综述" class="headerlink" title="高效web前端开发综述"></a>高效web前端开发综述</h2><h3 id="web前端开发概述"><a href="#web前端开发概述" class="headerlink" title="web前端开发概述"></a>web前端开发概述</h3><h3 id="高效web前端开发"><a href="#高效web前端开发" class="headerlink" title="高效web前端开发"></a>高效web前端开发</h3><h2 id="HTML相关开发最佳实践"><a href="#HTML相关开发最佳实践" class="headerlink" title="HTML相关开发最佳实践"></a>HTML相关开发最佳实践</h2><h3 id="标准的HTML代码"><a href="#标准的HTML代码" class="headerlink" title="标准的HTML代码"></a>标准的HTML代码</h3><h3 id="高可读性的HTML"><a href="#高可读性的HTML" class="headerlink" title="高可读性的HTML"></a>高可读性的HTML</h3><h3 id="积极拥抱HTML5"><a href="#积极拥抱HTML5" class="headerlink" title="积极拥抱HTML5"></a>积极拥抱HTML5</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;web前端开发最佳实践&quot;&gt;&lt;a href=&quot;#web前端开发最佳实践&quot; class=&quot;headerlink&quot; title=&quot;web前端开发最佳实践&quot;&gt;&lt;/a&gt;web前端开发最佳实践&lt;/h1&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>在hexo搭建的博客中引入图片</title>
    <link href="www.aabigale.top/2020/04/06/%E5%9C%A8hexo%E6%90%AD%E5%BB%BA%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%BC%95%E5%85%A5%E5%9B%BE%E7%89%87/"/>
    <id>www.aabigale.top/2020/04/06/%E5%9C%A8hexo%E6%90%AD%E5%BB%BA%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%BC%95%E5%85%A5%E5%9B%BE%E7%89%87/</id>
    <published>2020-04-06T06:04:08.995Z</published>
    <updated>2020-04-06T06:04:37.536Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在hexo搭建的博客中引入图片"><a href="#在hexo搭建的博客中引入图片" class="headerlink" title="在hexo搭建的博客中引入图片"></a>在hexo搭建的博客中引入图片</h1><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;在hexo搭建的博客中引入图片&quot;&gt;&lt;a href=&quot;#在hexo搭建的博客中引入图片&quot; class=&quot;headerlink&quot; title=&quot;在hexo搭建的博客中引入图片&quot;&gt;&lt;/a&gt;在hexo搭建的博客中引入图片&lt;/h1&gt;&lt;script&gt;
        docu
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Linux</title>
    <link href="www.aabigale.top/2020/04/06/Linux/"/>
    <id>www.aabigale.top/2020/04/06/Linux/</id>
    <published>2020-04-06T03:15:10.256Z</published>
    <updated>2020-04-14T11:33:34.299Z</updated>
    
    <content type="html"><![CDATA[<h1 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h1><a id="more"></a><h2 id="部署虚拟环境安装-Linux-系统："><a href="#部署虚拟环境安装-Linux-系统：" class="headerlink" title="部署虚拟环境安装 Linux 系统："></a>部署虚拟环境安装 Linux 系统：</h2><h2 id="新手必须掌握的-Linux-命令"><a href="#新手必须掌握的-Linux-命令" class="headerlink" title="新手必须掌握的 Linux 命令"></a>新手必须掌握的 Linux 命令</h2><p>执行 Linux 命令的格式</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">命令名称 [命令参数] [命令对象] &lt;中间用空格隔开&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="强大好用的-Shell"><a href="#强大好用的-Shell" class="headerlink" title="强大好用的 Shell"></a>强大好用的 Shell</h3><ul><li>通过上下方向键来调取过往执行过的 Linux 命令</li><li>命令或参数仅需输入前几位就可以用 tab 键补全</li><li>具有强大的批处理脚本</li><li>具有实用的环境变量功能</li></ul><h3 id="执行帮助文档命令"><a href="#执行帮助文档命令" class="headerlink" title="执行帮助文档命令"></a>执行帮助文档命令</h3><h3 id="常用系统工作命令"><a href="#常用系统工作命令" class="headerlink" title="常用系统工作命令"></a>常用系统工作命令</h3><ul><li><p>echo 命令 ：用于在终端输出字符串或变量提取后的值，格式为 “ echo [字符串 | $变量] “</p></li><li><p>date 命令 ：用于显示及设置系统的时间或日期，格式为 “ date [选项] [+指定的格式]”</p><table><thead><tr><th align="center">参数</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">%t</td><td align="center">跳格 [ tab 键]</td></tr><tr><td align="center">%H</td><td align="center">小时（00 ~ 23）</td></tr><tr><td align="center">%I</td><td align="center">小时（00 ~ 12）</td></tr><tr><td align="center">%M</td><td align="center">分钟（00 ~ 59）</td></tr><tr><td align="center">%S</td><td align="center">秒（00 ~ 59）</td></tr><tr><td align="center">%j</td><td align="center">今年中的第几天</td></tr></tbody></table></li></ul><ul><li><p>reboot 命令：用于重启系统，格式为 reboot</p></li><li><p>poweroff 命令：用于关闭系统，格式为 poweroff</p></li><li><p>wget 命令：用于在终端中下载网络文件，格式为 “ wget [参数] 下载地址”</p><p><img src="E:%5Cnodejs%5Cnode_global%5Chexo%5Csource_posts%5C9.png" alt="9"></p></li><li><p>ps 命令：用于查看系统中的进程状态，格式为 “ps [参数]”</p><table><thead><tr><th align="center">参数</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">-a</td><td align="center">显示所有进程（包括其他用户的进程）</td></tr><tr><td align="center">-u</td><td align="center">用户以及其他详细信息</td></tr><tr><td align="center">-x</td><td align="center">显示没有控制终端的进程</td></tr></tbody></table></li></ul><ul><li><h3 id="系统状态检测命令"><a href="#系统状态检测命令" class="headerlink" title="系统状态检测命令"></a>系统状态检测命令</h3></li></ul><h3 id="工作目录切换命令"><a href="#工作目录切换命令" class="headerlink" title="工作目录切换命令"></a>工作目录切换命令</h3><h3 id="文本文件编辑命令"><a href="#文本文件编辑命令" class="headerlink" title="文本文件编辑命令"></a>文本文件编辑命令</h3><h3 id="文件目录管理命令"><a href="#文件目录管理命令" class="headerlink" title="文件目录管理命令"></a>文件目录管理命令</h3><h3 id="打包压缩与搜索命令"><a href="#打包压缩与搜索命令" class="headerlink" title="打包压缩与搜索命令"></a>打包压缩与搜索命令</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;linux&quot;&gt;&lt;a href=&quot;#linux&quot; class=&quot;headerlink&quot; title=&quot;linux&quot;&gt;&lt;/a&gt;linux&lt;/h1&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>数据结构</title>
    <link href="www.aabigale.top/2020/04/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>www.aabigale.top/2020/04/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</id>
    <published>2020-04-05T13:51:43.137Z</published>
    <updated>2020-04-21T08:18:49.222Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><a id="more"></a><h2 id="数据结构绪论"><a href="#数据结构绪论" class="headerlink" title="数据结构绪论"></a>数据结构绪论</h2><h3 id="基本概念与术语"><a href="#基本概念与术语" class="headerlink" title="基本概念与术语"></a>基本概念与术语</h3><h3 id="逻辑结构与物理结构"><a href="#逻辑结构与物理结构" class="headerlink" title="逻辑结构与物理结构"></a>逻辑结构与物理结构</h3><h3 id="抽象数据结构"><a href="#抽象数据结构" class="headerlink" title="抽象数据结构"></a>抽象数据结构</h3><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><h3 id="时间复杂度与空间复杂度"><a href="#时间复杂度与空间复杂度" class="headerlink" title="时间复杂度与空间复杂度"></a>时间复杂度与空间复杂度</h3><h2 id="线性表（list）"><a href="#线性表（list）" class="headerlink" title="线性表（list）"></a>线性表（list）</h2><h2 id="栈与队列"><a href="#栈与队列" class="headerlink" title="栈与队列"></a>栈与队列</h2><h2 id="串"><a href="#串" class="headerlink" title="串"></a>串</h2><h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><h2 id="图"><a href="#图" class="headerlink" title="图"></a>图</h2><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;数据结构&quot;&gt;&lt;a href=&quot;#数据结构&quot; class=&quot;headerlink&quot; title=&quot;数据结构&quot;&gt;&lt;/a&gt;数据结构&lt;/h1&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>算法</title>
    <link href="www.aabigale.top/2020/04/05/%E7%AE%97%E6%B3%95/"/>
    <id>www.aabigale.top/2020/04/05/%E7%AE%97%E6%B3%95/</id>
    <published>2020-04-05T08:58:21.848Z</published>
    <updated>2020-04-05T10:05:18.377Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><a id="more"></a><h2 id="大整数运算"><a href="#大整数运算" class="headerlink" title="大整数运算"></a>大整数运算</h2><p>该部分重难点</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* 大整数的运算的算法思想与处理技巧</span><br><span class="line">* 大整数进行加、减、乘、除运算的算法框架</span><br></pre></td></tr></tbody></table></figure><ul><li><p>计算n！</p><ul><li>当n规模较小 （n&lt;13）<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">main()</span><br><span class="line">{</span><br><span class="line">    int n,t,k;</span><br><span class="line">    scanf("%d",&amp;n);</span><br><span class="line">    t=1; //t为累乘器                             for(k=1;k&lt;=n;k++)       </span><br><span class="line">        t*=k;          </span><br><span class="line">    printf(" %d!=%ld\n",n,t);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li>当n规模较大<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;math.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">{</span><br><span class="line">  int j,k,m,n,a[100000];</span><br><span class="line">  long g,t;</span><br><span class="line">  double s;</span><br><span class="line">  printf("Please input an integer: ");</span><br><span class="line">  scanf("%d",&amp;n);</span><br><span class="line">  s=0;</span><br><span class="line">  for (k=2;k&lt;=n;k++)</span><br><span class="line">    s+=log10(k);</span><br><span class="line">  m=(int)s+1;//计算n!后的位数</span><br><span class="line">  for (k=1;k&lt;=m;k++)</span><br><span class="line">     a[k]=0;</span><br><span class="line">  a[1]=1; g=0;//进位符</span><br><span class="line"> </span><br><span class="line">  for (k=2;k&lt;=n;k++)</span><br><span class="line">    for (j=1;j&lt;=m;j++)</span><br><span class="line">    {</span><br><span class="line">      t=a[j]*k+g;</span><br><span class="line">      a[j]=t%10;</span><br><span class="line">      g=t/10;</span><br><span class="line">  }</span><br><span class="line"> printf("%d!=",n);</span><br><span class="line">  for (k=m;k&gt;=1;k--)</span><br><span class="line">    printf("%1d",a[k]);</span><br><span class="line">  printf("\n");</span><br><span class="line">  printf("m=%d\n",m);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul></li></ul><ul><li><p>大整数加法</p><p>用数组储存，假定每个数组元素存储4位</p><p><strong>核心代码：</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">void add(int *a, int *b, int *c)</span><br><span class="line">{</span><br><span class="line"> int i;</span><br><span class="line"> for(i = N - 1; i &gt;= 0; i--)</span><br><span class="line">    {</span><br><span class="line">      c[i] = a[i] + b[i] + carry;</span><br><span class="line">      carry=c[i]/10000;</span><br><span class="line">      c[i]=c[i]%10000;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><ul><li><p>大整数减法</p><p><strong>核心代码：</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">void sub(int *a, int *b, int *c) </span><br><span class="line">{</span><br><span class="line">  int i;</span><br><span class="line">  for(i =N- 1; i &gt;= 0; i--) </span><br><span class="line"> {</span><br><span class="line">   c[i] = a[i] - b[i] - borrow;</span><br><span class="line">   if(c[i] &gt;= 0)</span><br><span class="line">       borrow = 0;</span><br><span class="line">   else // 借位</span><br><span class="line">   {</span><br><span class="line">       c[i] = c[i] + 10000;</span><br><span class="line">       borrow = 1;}</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>大整数乘法</p><ul><li><p>大整数与整数相乘</p><p><strong>核心代码：</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">void mul(int *a, int b, int *c)     </span><br><span class="line">{ </span><br><span class="line">  int i, tmp, carry = 0;</span><br><span class="line">  for(i = N - 1; i &gt;= 0; i--)       </span><br><span class="line">  {</span><br><span class="line">       tmp = a[i] * b + carry;     </span><br><span class="line">       c[i] = tmp % 10000;                          carry = tmp / 10000;         </span><br><span class="line">  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul></li></ul><ul><li><p>大整数与大整数相乘</p><p><strong>核心代码：</strong></p></li></ul><p>​                                                    </p><p>​                                                                         </p><h2 id="算法的概念"><a href="#算法的概念" class="headerlink" title="算法的概念"></a>算法的概念</h2><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><h2 id="递推"><a href="#递推" class="headerlink" title="递推"></a>递推</h2><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><h2 id="回溯法"><a href="#回溯法" class="headerlink" title="回溯法"></a>回溯法</h2><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><h2 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;算法&quot;&gt;&lt;a href=&quot;#算法&quot; class=&quot;headerlink&quot; title=&quot;算法&quot;&gt;&lt;/a&gt;算法&lt;/h1&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>数据库系统概述 一</title>
    <link href="www.aabigale.top/2020/04/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0%20%E4%B8%80/"/>
    <id>www.aabigale.top/2020/04/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0%20%E4%B8%80/</id>
    <published>2020-04-03T09:02:21.868Z</published>
    <updated>2020-06-03T02:52:18.371Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据库系统概述一"><a href="#数据库系统概述一" class="headerlink" title="数据库系统概述一"></a>数据库系统概述一</h1><a id="more"></a><h2 id="数据库基本知识与关系模型"><a href="#数据库基本知识与关系模型" class="headerlink" title="数据库基本知识与关系模型"></a>数据库基本知识与关系模型</h2><h3 id="第一章-数据库系统的基本概念"><a href="#第一章-数据库系统的基本概念" class="headerlink" title="第一章 数据库系统的基本概念"></a>第一章 数据库系统的基本概念</h3><h4 id="第一讲—初步认识数据库系统"><a href="#第一讲—初步认识数据库系统" class="headerlink" title="第一讲—初步认识数据库系统"></a>第一讲—初步认识数据库系统</h4><h4 id="第二讲—数据库系统的结构抽象与演变"><a href="#第二讲—数据库系统的结构抽象与演变" class="headerlink" title="第二讲—数据库系统的结构抽象与演变"></a>第二讲—数据库系统的结构抽象与演变</h4><h3 id="第二章-关系模型与关系运算"><a href="#第二章-关系模型与关系运算" class="headerlink" title="第二章 关系模型与关系运算"></a>第二章 关系模型与关系运算</h3><h4 id="第三讲—关系模型之基本概念"><a href="#第三讲—关系模型之基本概念" class="headerlink" title="第三讲—关系模型之基本概念"></a>第三讲—关系模型之基本概念</h4><h4 id="第四讲—关系模型之关系代数"><a href="#第四讲—关系模型之关系代数" class="headerlink" title="第四讲—关系模型之关系代数"></a>第四讲—关系模型之关系代数</h4><h4 id="第五讲—关系模型之关系演算"><a href="#第五讲—关系模型之关系演算" class="headerlink" title="第五讲—关系模型之关系演算"></a>第五讲—关系模型之关系演算</h4><h2 id="数据库语言—SQL"><a href="#数据库语言—SQL" class="headerlink" title="数据库语言—SQL"></a>数据库语言—SQL</h2><h3 id="第三章-交互式SQL语言及其应用"><a href="#第三章-交互式SQL语言及其应用" class="headerlink" title="第三章 交互式SQL语言及其应用"></a>第三章 交互式SQL语言及其应用</h3><h4 id="第六讲—SQL语言之概览"><a href="#第六讲—SQL语言之概览" class="headerlink" title="第六讲—SQL语言之概览"></a>第六讲—SQL语言之概览</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">本讲重难点：</span><br><span class="line">* SQL-DDL的基本语句：create database，create table</span><br><span class="line">* SQL-DML的基本语句：insert，delete，update，select</span><br><span class="line">* SQL-select语句的训练：正确表达各种需求</span><br></pre></td></tr></tbody></table></figure><h5 id="SQL语言概述"><a href="#SQL语言概述" class="headerlink" title="SQL语言概述"></a>SQL语言概述</h5><ul><li><p>SQL 语言提出与发展</p></li><li><p>SQL 语言的功能概述</p><ul><li>SQL语言是集DDL、DML、DCL于一体的数据库语言</li><li>SQL语言由9个单词引导操作语句来构成<ul><li>DDL语句引导词：create，alter，drop</li><li>DML语句引导词：insert，delete，update，select</li><li>DCL语句引导词：grant，revoke &lt;安全性控制：授权与撤销授权</li></ul></li><li><strong>交互式SQL→嵌入式SQL→动态SQl等</strong></li></ul></li></ul><h5 id="SQL语言之DML-操作数据库"><a href="#SQL语言之DML-操作数据库" class="headerlink" title="SQL语言之DML-操作数据库"></a>SQL语言之DML-操作数据库</h5><ul><li><p>利用 SQL 语言建立数据库</p><ul><li><p>SQL - DDL</p><ul><li>建立数据库：定义数据库和表（使用DDL），向表中追加元祖（使用DML）</li></ul></li><li><p>创建数据库语句——Create Database</p><ul><li><p>创建Database </p><ul><li><p>数据库 (Database) 是若干具有相互关联关系的Table / Relation 的集合 </p></li><li><p>数据库可以看作是一个集中存放若干 Table 的大型文件</p></li><li><p>create database 的简单语法形式： create createdatabase database 数据库名;</p></li><li><p>*<em>示例：创建课程学习数据库SCT *</em></p><p>create  database  SCT;</p></li></ul></li><li><p>创建关系/表的语句—Create Table</p><ul><li><p>create table 简单语法形式</p><p>Createtable table表名( 列名数据类型[Primary key Primary key |Unique |Unique][Not Notnull null] [, 列名数据类型[Not Notnull null] , …]) ;</p></li><li><p>“[ ] ”表示其括起的内容可以省略，“| ”表示其隔开的两项可取其一 </p></li><li><p>Primary key:主键约束。每个表只能创建一个主键约束。 </p></li><li><p>Unique:唯一性约束(即候选键)。可以有多个唯一性约束。 </p></li><li><p>Not null: 非空约束。是指该列允许不允许有空值出现，如选择了Notnull表 明该列不允许有空值出现。 </p></li><li><p>语法中的数据类型在SQL标准中有定义</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">示例：定义学生表Student </span><br><span class="line">Create Table Student (S#char(8)not null , Snamechar(10), Ssexchar(2),  Sageinteger, D#char(2),  Sclasschar(6));</span><br><span class="line">示例：定义课程表Course </span><br><span class="line">Create Table Course (C#  char(3) , Cnamechar(12), Choursinteger, Credit  float(1), T# char(3));</span><br></pre></td></tr></tbody></table></figure></li></ul></li></ul></li><li><p>SQL - DML</p><ul><li><p>DML:  Data  Manipulation Language</p></li><li><p>向Table中追加新的元组：Insert </p><ul><li><p>insert into简单语法形式</p></li><li><p>insert   into  表名[ (列名[, 列名]…]</p></li></ul><p>​                values   (值[, 值] , …) ;</p><ul><li>*<em>values后面值的排列，须与into子句后面的列名排列一致 *</em></li><li><strong>若表名后的所有列名省略，则values后的值的排列，须与该表存储中的 列名排列一致</strong></li></ul></li><li><p>修改Table中某些元组中的某些属性的值: Update </p></li><li><p>删除Table中的某些元组: Delete </p></li><li><p>对Table中的数据进行各种条件的检索: Select</p></li></ul></li><li><p>向表中追加元组的值–INSERT INTO</p><ul><li><p>向表中追加元组</p><ul><li><p>insert into简单语法形式</p><p>insert  into 表名[ (列名[, 列名]…] values  values  (值[, 值] , …) ;</p></li><li><p>values后面值的排列，须与into子句后面的列名排列一致 </p></li><li><p>若表名后的所有列名省略，则values后的值的排列，须与该表存储中的 列名排列一致</p></li></ul></li></ul></li></ul></li></ul><ul><li><p>利用SQL语言进行简单查询</p><ul><li><p>单表查询-SELECT-FROM-WHERE</p><ul><li><p>Select的简单语法形式</p><p>Select   列名[[, 列名] …]  From   表名  [  Where   检索条件] ;</p></li><li><p>语义：从表名所给出的表中，查询出满足检索条件的元组，并按给定的列名 及顺序进行投影显示。</p></li><li><p>相当于：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="E:\nodejs\node_global\hexo\source\_posts\数据库系统概述一\select语句相当于.png" alt="select语句相当于" title="">                </div>                <div class="image-caption">select语句相当于</div>            </figure><p></p></li><li><p>Select语句中的select …, from…, where…,  等被称为子句，在以上基本形 式基础上会增加许多构成要素，也会增加许多新的子句，满足不同的需求。</p></li></ul></li><li><p>检索条件-SELECT-FROM-WHERE</p><p>检索条件的书写 </p><ul><li><p>与选择运算的条件con书写一样，只是其逻辑运算符用and , or, not 来表示, 同时也要注意运算符的优先次序及括弧的使用。*<em>书写要点是注意 对自然语言检索条件的正确理解。 *</em></p></li><li><p>示例：检索教师表中所有工资少于1500元或者工资大于2000元并且是03系的教师姓名？ </p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Select    Tname From  Teacher WhereSalary &lt; 1500  or  Salary  &gt; 2000  and  D# = ’03’;</span><br><span class="line"></span><br><span class="line">Select    Tname From  Teacher Where(Salary &lt; 1500  or  Salary &gt; 2000)  and  D# = ’03’;&lt;正确&gt;</span><br></pre></td></tr></tbody></table></figure></li></ul></li><li><p>检索结果之去重复记录-SELECT DISTINCT FROM-WHERE</p><p>结果唯一性问题 &lt;关系模型不允许出现重复元组。但现实DBMS，却允许出现重复元组，但也允许无重复元组。&gt;</p><ul><li><p>在 Table 中要求无重复元组是通过定义 Primary key 或  Unique 来保证的;而在 检索结果中要求无重复元组, 是通过 DISTINCT 保留字的使用来实现的</p></li><li><p>示例：在选课表中，检索成绩大于80分的所有学号</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Select  S#  From  SC  Where  Score &gt; 80 ;                    </span><br><span class="line">//有重复元组出现，比如一个同学两门以上课程大于80</span><br><span class="line"></span><br><span class="line">Select  DISTINCT  S#  From  SC  Where  Score &gt; 80;                     //重复元组被DISTINCT过滤掉，只保留一份</span><br></pre></td></tr></tbody></table></figure></li></ul></li><li><p>检索结果之排序-SELECT-FROM-WHERE-ORDER BY</p><p>结果排序问题 &lt;DBMS可以对检索结果进行排序，可以升序排列，也可以降序排列&gt;</p><ul><li><p>Select语句中结果排序是通过增加order by子句实现的 order by 列名[ [asc asc| | desc desc] </p></li><li><p>意义为检索结果按指定列名进行排序，<strong>若后跟asc或省略，则为升序；若后跟desc, 则为降序</strong>。 </p></li><li><p>示例：按学号由小到大的顺序显示出所有学生的学号及姓名 </p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Select    S#, SnameFrom  Student Order  ByS#  ASC;</span><br></pre></td></tr></tbody></table></figure></li><li><p>示例：检索002号课大于80分的所有同学学号并按成绩由高到低顺序显示 </p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Select    S#   From  SC   WhereC# = ‘002’and  Score &gt; 80 Order  ByScore  DESC;</span><br></pre></td></tr></tbody></table></figure></li></ul></li><li><p>模糊查询-SELECT-FROM-WHERE * LIKE *</p><p>模糊查询问题：比如检索姓张的学生，检索张某某；这类查询问题，Select语句是通过在检 索条件中引入运算符like来表示的 </p><ul><li><p>含有like运算符的表达式 </p><p>列名 [ not] like “ 字符串 ” </p></li><li><p>找出匹配给定字符串的字符串。其中给定字符串中可以出现%, _等匹配符</p></li><li><p>匹配规则</p><ul><li><p>“ % ”匹配零个或多个字符</p></li><li><p>“ _ ”匹配任意单个字符 _</p></li><li><p>“  \ ”转义字符，用于去掉一些特殊字符的特定含义，使其被作为普通 字符看待, 如用“%”去匹配字符%，用_ 去匹配字符_</p></li><li><p>示例：检索所有姓张的学生学号及姓名 </p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Select S#, Sname  From Student Where Sname Like  ‘张%’;</span><br></pre></td></tr></tbody></table></figure></li></ul></li></ul></li></ul></li><li><p>利用SQL语言进行多表联合查询 </p><ul><li><p>多表联合查询</p><p>多表联合检索可以通过连接运算来完成，而连接运算又可以通过广义笛卡尔积后再进 行选择运算来实现。 </p><ul><li><p>Select 的多表联合检索语句 </p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Select   列名[ [, 列名] …] </span><br><span class="line">From   表名1, 表名2,   … &lt;表明乘积操作&gt;</span><br><span class="line">Where   检索条件;</span><br></pre></td></tr></tbody></table></figure></li><li><p>相当于II列名, …, 列名( 检索条件(表名1 *表名2 *…))</p></li><li><p>检索条件中要包含连接条件，通过不同的连接条件可以实现等值连接、不 等值连接及各种   -连接</p></li></ul></li><li><p>多表联合查询之连接条件</p><ul><li>-连接之等值连接</li></ul><p>​                示例：按“001”号课成绩由高到低顺序显示所有学生的姓名(二表    连接) </p><p>​                </p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Select Sname From  Student, SC </span><br><span class="line">Where Student.S# = SC.S# and SC.C# = ‘001’ </span><br><span class="line">Order By Score DESC;</span><br></pre></td></tr></tbody></table></figure><ul><li><p>多表连接时，如两个表的属性名相同，则需采用<strong>表名.属性名</strong>方式来限定该 属性是属于哪一个表 </p><p>示例：按‘数据库’课成绩由高到低顺序显示所有同学姓名(三表连接) </p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Select Sname From Student,SC,Course Where Student.S# = SC.S# and SC.C# = Course.C# and Cname= ‘数据库’ </span><br><span class="line">Order ByScore  DESC;</span><br></pre></td></tr></tbody></table></figure></li></ul></li><li><p>表更名与表别名</p><p>重名之处理：连接运算涉及到重名的问题，如两个表中的属性重名，连接的两个表重名 (同一表的连接)等，因此需要使用别名以便区分 </p><ul><li><p>select中采用别名的方式 </p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Select 列名 as 列别名 [[,列名 as 列别名]…] </span><br><span class="line">From 表名1 as 表别名1,表名2 as 表别名2, …</span><br><span class="line">Where 检索条件;</span><br></pre></td></tr></tbody></table></figure></li><li><p>上述定义中的as 可以省略 </p></li><li><p>当定义了别名后，在检索条件中可以使用别名来限定属性</p></li></ul></li><li><p>不等值连接</p><p>-连接之不等值连接</p><p>示例：求有薪水差额的任意两位教师 </p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Select T1.Tname as Teacher1, T2.Tname as Teacher2 </span><br><span class="line">From Teacher T1, Teacher T2 </span><br><span class="line">Where T1.Salary &gt; T2.Salary ;</span><br></pre></td></tr></tbody></table></figure></li><li><p>多表联合查询训练</p><p>示例：求既学过“001”号课又学过“002”号课的所有学生的学号 </p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Select S1.S# From SC S1,SC S2 </span><br><span class="line">Where S1.S# = S2.S# and S1.C#=‘001’ and  S2.C#=‘002 ;</span><br></pre></td></tr></tbody></table></figure></li></ul></li><li><p>利用SQL语言进行增-删-改 </p><ul><li><p>SQL - 之更新操作</p><ul><li>元组新增Insert：新增一个或一些元组到数据库的Table中 </li><li>元组更新Update:对某些元组中的某些属性值进行重新设定 </li><li>元组删除Delete：删除某些元组</li></ul></li><li><p>SQL - 之INSERT</p><ul><li><p>元组新增Insert命令有两种形式</p></li><li><p>单一元组新增命令形式：插入一条指定元组值的元组</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">insert  into表名[(列名[，列名]…)] </span><br><span class="line">values (值[，值]…)；</span><br></pre></td></tr></tbody></table></figure></li><li><p>批数据新增命令形式：插入子查询结果中的若干条元组。待插入的元 组由子查询给出</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insertinto表名[(列名[，列名]…)] 子查询;</span><br></pre></td></tr></tbody></table></figure></li><li><p>示例：批元组新增 </p><p>新建立Table: St(S#, Sname),将检索到的满足条件的同学新增到该表中 </p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Select S#, Sname</span><br><span class="line">From Student Where Sname like ‘%伟’;</span><br></pre></td></tr></tbody></table></figure><p><strong>注意：当新增元组时，DBMS会检查用户定义的完整性约束条件等，如不 符合完整性约束条件，则将不会执行新增动作（将在后面介绍）</strong></p></li><li><p>示例：新建Table:   St(S#, Sname, avgScore), 将检索到的同学的平均成 绩新增到该表中 </p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Insert Into St(S#,Sname,avgScore) Select S#,Sname,Avg(Score) From  Student, SC </span><br><span class="line">Where Student.S# = SC.S# </span><br><span class="line">Group by   Student.S# ;</span><br></pre></td></tr></tbody></table></figure></li></ul></li><li><p>SQL - 之DELETE</p></li><li><p>SQL - 之UPDATE</p></li></ul></li><li><pre><code><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">利用SQL语言修正与撤销数据库</span><br><span class="line"></span><br><span class="line">* SQL-DDL之撤销与修改</span><br><span class="line"></span><br><span class="line">  * 修正数据库：修正数据库的定义，主要是修正表的定义</span><br><span class="line"></span><br><span class="line">    修正表的定义</span><br></pre></td></tr></tbody></table></figure>    alter table tablename     [add  {colnamedatatype, …}]    增加新列     [drop {完整性约束名}]       删除完整性约束 [modify {colnamedatatype, …}] 修改列定义    <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">* 示例：在学生Student(S#,Sname,Ssex,Sage,D#,Sclass)基础上增加二列Saddr, PID</span><br></pre></td></tr></tbody></table></figure>    Alter Table Student Add Saddrchar[40],  PID char[18] ;    <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">* 示例：将上例表中Sname列的数据类型增加两个字符</span><br></pre></td></tr></tbody></table></figure>    Alter Table Student Modify Sname   char(10);    <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">* 示例：删除学生姓名必须取唯一值的约束</span><br></pre></td></tr></tbody></table></figure>    Alter Table Student DropUnique(Sname)    <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">* 撤消基本表</span><br></pre></td></tr></tbody></table></figure>    drop   table表名    <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">* 撤消数据库</span><br></pre></td></tr></tbody></table></figure>    drop   database数据库名;     <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*  SQL-DDL之数据库指定与关闭命令</span><br><span class="line"></span><br><span class="line">  指定当前数据库</span><br></pre></td></tr></tbody></table></figure>  use  数据库名;  <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">关闭当前数据库</span><br></pre></td></tr></tbody></table></figure>  close 数据库名;</code></pre></li></ul><h5 id="本讲回顾"><a href="#本讲回顾" class="headerlink" title="本讲回顾"></a>本讲回顾</h5><h4 id="第七讲—SQL语言之查询与视图"><a href="#第七讲—SQL语言之查询与视图" class="headerlink" title="第七讲—SQL语言之查询与视图"></a>第七讲—SQL语言之查询与视图</h4><h4 id="第八讲—SQL语言与完整性和安全性"><a href="#第八讲—SQL语言与完整性和安全性" class="headerlink" title="第八讲—SQL语言与完整性和安全性"></a>第八讲—SQL语言与完整性和安全性</h4><h3 id="第四章-数据库应用程序开发"><a href="#第四章-数据库应用程序开发" class="headerlink" title="第四章 数据库应用程序开发"></a>第四章 数据库应用程序开发</h3><h4 id="第九讲—嵌入式SQL语言之基本技巧"><a href="#第九讲—嵌入式SQL语言之基本技巧" class="headerlink" title="第九讲—嵌入式SQL语言之基本技巧"></a>第九讲—嵌入式SQL语言之基本技巧</h4><h4 id="第十讲—嵌入式SQL语言之动态SQL"><a href="#第十讲—嵌入式SQL语言之动态SQL" class="headerlink" title="第十讲—嵌入式SQL语言之动态SQL"></a>第十讲—嵌入式SQL语言之动态SQL</h4><p>​                         </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;数据库系统概述一&quot;&gt;&lt;a href=&quot;#数据库系统概述一&quot; class=&quot;headerlink&quot; title=&quot;数据库系统概述一&quot;&gt;&lt;/a&gt;数据库系统概述一&lt;/h1&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
