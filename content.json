{"meta":{"title":"Aabigale's blog","subtitle":"","description":"","author":"Aabigale","url":"www.aabigale.top","root":"/"},"pages":[{"title":"","date":"2020-04-03T09:01:13.200Z","updated":"2020-04-03T09:01:13.200Z","comments":false,"path":"categories/index.html","permalink":"www.aabigale.top/categories/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"","date":"2020-04-03T08:24:18.028Z","updated":"2020-04-03T08:24:18.028Z","comments":false,"path":"tags/index.html","permalink":"www.aabigale.top/tags/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"","date":"2020-04-03T08:23:58.434Z","updated":"2020-04-03T08:23:58.434Z","comments":true,"path":"about/index.html","permalink":"www.aabigale.top/about/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"}],"posts":[{"title":"Java学习之高级篇","slug":"Java学习之高级篇","date":"2020-04-17T12:18:51.793Z","updated":"2020-04-17T12:18:51.794Z","comments":true,"path":"2020/04/17/Java学习之高级篇/","link":"","permalink":"www.aabigale.top/2020/04/17/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%AB%98%E7%BA%A7%E7%AF%87/","excerpt":"高级篇","text":"高级篇 新技术Java 9 Jigsaw Jshell Reactive Streams Java 10 局部变量类型推断 G1的并行Full GC ThreadLocal握手机制 Java 11 ZGC Epsilon 增强var Java 12 Switch 表达式 Java 13 Text Blocks Dynamic CDS Archives Java 14 Java打包工具 更有价值的NullPointerException record类型 Spring 5 响应式编程 Spring Boot 2.0 http/2 http/3 性能优化使用单例使用Future模式使用线程池选择就绪减少上下文切换减少锁粒度数据压缩结果缓存Stream并行流GC调优JVM内存分配调优SQL调优线上问题分析dump 线程Dump 内存Dump gc情况 dump获取及分析工具 jstack jstat jmap jhat Arthas dump分析死锁dump分析内存泄露自己编写各种outofmemory，stackoverflow程序 HeapOutOfMemory Young OutOfMemory MethodArea OutOfMemory ConstantPool OutOfMemory DirectMemory OutOfMemory Stack OutOfMemory Stack OverFlow Arthas jvm相关 class/classloader相关 monitor/watch/trace相关 options 管道 后台异步任务 常见问题解决思路 内存溢出 线程死锁 类加载冲突 load飙高 CPU利用率飙高 慢SQL 使用工具尝试解决以下问题，并写下总结 当一个Java程序响应很慢时如何查找问题 当一个Java程序频繁FullGC时如何解决问题 如何查看垃圾回收日志 当一个Java应用发生OutOfMemory时该如何解决 如何判断是否出现死锁 如何判断是否存在内存泄露 使用Arthas快速排查Spring Boot应用404/401问题 使用Arthas排查线上应用日志打满问题 利用Arthas排查Spring Boot应用NoSuchMethodError 编译原理知识编译与反编译Java代码的编译与反编译Java的反编译工具 javap jad CRF 即时编译器 编译器优化 操作系统知识Linux的常用命令 find、grep、ps、cp、move、tar、head、tail、netstat、lsof、tree、wget、curl、ping、ssh、echo、free、top 进程间通信服务器性能指标 load CPU利用率 内存使用情况 qps rt 进程同步 生产者消费者问题 哲学家就餐问题 读者写者问题 缓冲区溢出分段和分页虚拟内存与主存虚拟内存管理换页算法数据库知识MySql 执行引擎MySQL 执行计划 如何查看执行计划 如何根据执行计划进行SQL优化 索引 Hash索引&amp;B树索引 普通索引&amp;唯一索引 聚集索引&amp;非聚集索引 覆盖索引 最左前缀原则 索引下推 索引失效 回表SQL优化数据库事务和隔离级别 事务的ACID 事务的隔离级别与读现象 事务能不能实现锁的功能 编码方式 utf8 utf8mb4 为什么不要在数据库中使用utf8编码 行数统计 count(1)、count(*)、count(字段)的区别 为什么建议使用count(*) 数据库锁 共享锁、排它锁 行锁、表锁 乐观锁、悲观锁 使用数据库锁实现乐观锁 Gap Lock、Next-Key Lock 连接 内连接 左连接 右连接 数据库主备搭建log binlog redolog 内存数据库 h2 分库分表读写分离常用的nosql数据库 redis memcached 分别使用数据库锁、NoSql实现分布式锁性能调优数据库连接池数据结构与算法知识简单的数据结构 栈 队列 链表 数组 哈希表 栈和队列的相同和不同之处 栈通常采用的两种存储结构 两个栈实现队列，和两个队列实现栈 树 二叉树 字典树 平衡树 排序树 B树 B+树 R树 多路树 红黑树 堆 大根堆 小根堆 图 有向图 无向图 拓扑 稳定的排序算法 冒泡排序 插入排序 鸡尾酒排序 桶排序 计数排序 归并排序 原地归并排序 二叉排序树排序 鸽巢排序 基数排序 侏儒排序 图书馆排序 块排序 不稳定的排序算法 选择排序 希尔排序 Clover排序算法 梳排序 堆排序 平滑排序 快速排序 内省排序 耐心排序 各种排序算法和时间复杂度深度优先和广度优先搜索全排列贪心算法KMP算法hash算法海量数据处理 分治 hash映射 堆排序 双层桶划分 Bloom Filter bitmap 数据库索引 mapreduce等。 大数据知识搜索 Solr Lucene ElasticSearch 流式计算 Storm Spark Flink Hadoop，离线计算 HDFS MapReduce 分布式日志收集 flume kafka logstash 数据挖掘 mahout 网络安全知识XSS XSS的防御 CSRF注入攻击 SQL注入 XML注入 CRLF注入 文件上传漏洞加密与解密 对称加密 非对称加密 哈希算法 加盐哈希算法 加密算法 MD5，SHA1、DES、AES、RSA、DSA 彩虹表DDOS攻击DOS攻击DDOS攻击memcached为什么可以导致DDos攻击什么是反射型DDoS如何通过Hash碰撞进行DOS攻击SSL、TLS，HTTPS脱库、洗库、撞库 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[]},{"title":"Java学习之进阶篇","slug":"Java学习之进阶篇","date":"2020-04-17T12:04:26.505Z","updated":"2020-04-17T12:04:26.506Z","comments":true,"path":"2020/04/17/Java学习之进阶篇/","link":"","permalink":"www.aabigale.top/2020/04/17/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%BF%9B%E9%98%B6%E7%AF%87/","excerpt":"进阶篇","text":"进阶篇 Java底层知识字节码class文件格式CAFEBABE位运算用位运算实现加、减、乘、除、取余设计模式设计模式的六大原则 开闭原则（Open Close Principle） 里氏代换原则（Liskov Substitution Principle） 依赖倒转原则（Dependence Inversion Principle） 接口隔离原则（Interface Segregation Principle） 迪米特法则（最少知道原则）（Demeter Principle） 合成复用原则（Composite Reuse Principle） 创建型设计模式 单例模式 抽象工厂模式 建造者模式 工厂模式 原型模式 结构型设计模式 适配器模式 桥接模式 装饰模式 组合模式 外观模式 享元模式 代理模式 行为型设计模式 模版方法模式 命令模式 迭代器模式 观察者模式 中介者模式 备忘录模式 解释器模式 状态模式 策略模式 责任链模式 访问者模式 单例的七种写法 懒汉——线程不安全 懒汉——线程安全 饿汉 饿汉——变种 静态内部类 枚举 双重校验锁 为什么推荐使用枚举实现单例？三种工厂模式的区别及联系 简单工厂、工厂方法、模板工厂 会使用常用设计模式 工厂模式 适配器模式 策略模式 模板方法模式 观察者模式 外观模式 代理模式 不用synchronized和lock，实现线程安全的单例模式nio和reactor设计模式Spring中用到了哪些设计模式网络编程知识常用协议 tcp、udp、http、https 用Java实现FTP、SMTP协议 OSI七层模型 每一层的主要协议 TCP/UDP 三次握手与四次关闭 流量控制和拥塞控制 tcp粘包与拆包 TCP/IP IPV4 IPV6 HTTP http/1.0 http/1.1 http/2之间的区别 http和https的区别 http中 get和post区别 常见的web请求返回的状态码 404、302、301、500分别代表什么 用Java写一个简单的静态文件的HTTP服务器 http/2Java RMI，Socket，HttpClientcookie 与 session cookie被禁用，如何实现session 了解nginx和apache服务器的特性并搭建一个对应的服务器进程间通讯的方式什么是CDN？如果实现？DNS？ 什么是DNS 记录类型:A记录、CNAME记录、AAAA记录等 域名解析 根域名服务器 DNS污染 DNS劫持 公共DNS：114 DNS、Google DNS、OpenDNS 反向代理 正向代理 反向代理 反向代理服务器 框架知识Servlet 生命周期 线程安全问题 filter和listener web.xml中常用配置及作用 Hibernate 什么是OR Mapping Hibernate的缓存机制 Hibernate的懒加载 Hibernate/Ibatis/MyBatis之间的区别 MyBatis Mybatis缓存机制 #{}和${}的区别 mapper中传递多个参数 Mybatis动态sql Mybatis的延迟加载 Spring Bean的初始化 AOP原理 实现Spring的IOC spring四种依赖注入方式 Spring MVC 什么是MVC Spring mvc与Struts mvc的区别 Spring Boot Spring Boot 2.0 起步依赖 自动配置 Spring Boot的starter原理 自己实现一个starter 为什么Spring Boot可以通过main启动web项目 Spring SecuritySpring Cloud 服务发现与注册：Eureka、Zookeeper、Consul 负载均衡：Feign、Spring Cloud Loadbalance 服务配置：Spring Cloud Config 服务限流与熔断：Hystrix 服务链路追踪：Dapper 服务网关、安全、消息 应用服务器知识JBosstomcatjettyWeblogic工具git &amp; svnmaven &amp; gradlegit技巧 分支合并 冲突解决 提交回滚 maven技巧 依赖树 依赖仲裁 Intellij IDEA 常用插件：Maven Helper、FindBugs-IDEA、阿里巴巴代码规约检测、GsonFormat、Lombok plugin、.ignore、Mybatis plugin document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[]},{"title":"Java学习之底层篇","slug":"Java学习之底层篇","date":"2020-04-17T11:53:08.718Z","updated":"2020-04-17T11:53:08.719Z","comments":true,"path":"2020/04/17/Java学习之底层篇/","link":"","permalink":"www.aabigale.top/2020/04/17/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%BA%95%E5%B1%82%E7%AF%87/","excerpt":"底层篇","text":"底层篇 JVMJVM内存结构 运行时数据区 运行时数据区哪些是线程独享 堆和栈区别 方法区在不同版本JDK中的位置 堆外内存 TLAB Java中的对象一定在堆上分配吗？ 垃圾回收 GC算法：标记清除、引用计数、复制、标记压缩、分代回收、增量式回收 GC参数 对象存活的判定 垃圾收集器（CMS、G1、ZGC、Epsilon） JVM参数及调优 -Xmx -Xmn -Xms -Xss -XX:SurvivorRatio -XX:PermSize -XX:MaxPermSize -XX:MaxTenuringThreshold Java对象模型 oop-klass 对象头 HotSpot 即时编译器 编译优化 Java内存模型 计算机内存模型 缓存一致性 MESI协议 可见性 原子性 顺序性 happens-before as-if-serial 内存屏障 synchronized volatile final 锁 虚拟机性能监控与故障处理工具 jps jstack jmap jstat jconsole jinfo jhat javap btrace TProfiler jlink Arthas 类加载机制 classLoader 类加载过程是线程安全的吗？ 类加载过程 双亲委派（破坏双亲委派） 模块化（jboss modules、osgi、jigsaw） 打包工具 jar jlink jpackage 编译与反编译 什么是编译 什么是反编译 编译工具：javac 反编译工具：javap 、jad 、CRF JIT JIT优化（逃逸分析、栈上分配、标量替换、锁优化） document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[]},{"title":"数据库系统概述二","slug":"数据库系统概述二","date":"2020-04-10T08:26:01.025Z","updated":"2020-04-12T05:46:52.804Z","comments":true,"path":"2020/04/10/数据库系统概述二/","link":"","permalink":"www.aabigale.top/2020/04/10/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0%E4%BA%8C/","excerpt":"","text":"数据库系统之三–数据建模与数据库设计数据建模：思想与方法为什么要数据建模和数据库设计E - R模型 – 数据建模之基本思想E - R 模型 – 表达方法之 Chen 方法E - R 模型 – 表达方法之 Crow’s foot 方法数据建模之案例讲解数据库设计中的抽象123该部分的重难点* 理解 E-R 模型进行数据模型的基本思想，熟练掌握 E-R 模型的 Crow's foot 表达方法* 熟练运用 Crow's foot 方法进行数据建模，即建模训练 12数据库设计过程数据库设计过程与设计方法E - R 图 / IDEF1X 向关系模式的转换不正确数据库设计引发的问题及其解决1234该部分重难点* 理解数据库设计的四个过程* 理解不正确数据库设计引发的问题，为数据库理论的学习奠定问题基础* 理解不正确数据库设计引发的问题，提升数据建模与数据库设计能力 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[]},{"title":"JAVA实训作业","slug":"JAVA实训作业","date":"2020-04-09T07:59:31.340Z","updated":"2020-04-12T05:46:52.794Z","comments":true,"path":"2020/04/09/JAVA实训作业/","link":"","permalink":"www.aabigale.top/2020/04/09/JAVA%E5%AE%9E%E8%AE%AD%E4%BD%9C%E4%B8%9A/","excerpt":"JAVA实训作业","text":"JAVA实训作业 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[]},{"title":"前端之CSS","slug":"前端之CSS","date":"2020-04-07T06:02:28.960Z","updated":"2020-04-08T11:53:19.814Z","comments":true,"path":"2020/04/07/前端之CSS/","link":"","permalink":"www.aabigale.top/2020/04/07/%E5%89%8D%E7%AB%AF%E4%B9%8BCSS/","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[]},{"title":"在vscode中配置Java环境","slug":"在vscode中配置Java环境","date":"2020-04-07T05:19:19.431Z","updated":"2020-04-08T11:53:19.819Z","comments":true,"path":"2020/04/07/在vscode中配置Java环境/","link":"","permalink":"www.aabigale.top/2020/04/07/%E5%9C%A8vscode%E4%B8%AD%E9%85%8D%E7%BD%AEJava%E7%8E%AF%E5%A2%83/","excerpt":"在vscode中配置Java环境","text":"在vscode中配置Java环境 下载官网下载 使用配置中文 点击旁边的 Extensions 搜索框编辑 Chinese 下载 Chinese ( Simplified ) 更换主题​ 可以看自己喜好 下载关于编辑 Java 的插件​ 便于编辑而安装的插件 12345Beautify：代码高亮Terminal：直接唤起终端Project Manager：多个项目切换Auto Close Tag：标签自动闭合Eclipse Keymap：可以通过一些快捷键更方便地编写Java 配置 Java 环境而安装的插件 1234Language Support for Java(TM) by Red Hat 运行 Java 代码的Debugger for Java 调试 Java 程序Java Test Runner 测试 Java 程序Maven for Java Java环境下构建应用程序的软件 设置工作环境 点击菜单 File( 文件 ) –&gt; Save Workspace As····( 将工作区另存为)···· 将新建的 ( 文件名 ) 文件添加至工作区 新建 Java 项目 在工作区点击菜单栏 View ( 查看 ) –&gt; command Palette ( 命令面板) 输入Java，选择Java : Create Java Project，新建Java项目 在弹出的框中，选择工作空间文件夹 接着输入项目名称，回车 会自动生成一段打印hello Java代码 编译运行 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[]},{"title":"html","slug":"html","date":"2020-04-06T13:59:36.547Z","updated":"2020-04-08T11:53:19.803Z","comments":true,"path":"2020/04/06/html/","link":"","permalink":"www.aabigale.top/2020/04/06/html/","excerpt":"web前端开发最佳实践","text":"web前端开发最佳实践 高效web前端开发综述web前端开发概述高效web前端开发HTML相关开发最佳实践标准的HTML代码高可读性的HTML积极拥抱HTML5 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[]},{"title":"在hexo搭建的博客中引入图片","slug":"在hexo搭建的博客中引入图片","date":"2020-04-06T06:04:08.995Z","updated":"2020-04-06T06:04:37.536Z","comments":true,"path":"2020/04/06/在hexo搭建的博客中引入图片/","link":"","permalink":"www.aabigale.top/2020/04/06/%E5%9C%A8hexo%E6%90%AD%E5%BB%BA%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%BC%95%E5%85%A5%E5%9B%BE%E7%89%87/","excerpt":"","text":"在hexo搭建的博客中引入图片 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[]},{"title":"Linux","slug":"Linux","date":"2020-04-06T03:15:10.256Z","updated":"2020-04-14T11:33:34.299Z","comments":true,"path":"2020/04/06/Linux/","link":"","permalink":"www.aabigale.top/2020/04/06/Linux/","excerpt":"linux","text":"linux 部署虚拟环境安装 Linux 系统：新手必须掌握的 Linux 命令执行 Linux 命令的格式 1命令名称 [命令参数] [命令对象] &lt;中间用空格隔开&gt; 强大好用的 Shell 通过上下方向键来调取过往执行过的 Linux 命令 命令或参数仅需输入前几位就可以用 tab 键补全 具有强大的批处理脚本 具有实用的环境变量功能 执行帮助文档命令常用系统工作命令 echo 命令 ：用于在终端输出字符串或变量提取后的值，格式为 “ echo [字符串 | $变量] “ date 命令 ：用于显示及设置系统的时间或日期，格式为 “ date [选项] [+指定的格式]” 参数 作用 %t 跳格 [ tab 键] %H 小时（00 ~ 23） %I 小时（00 ~ 12） %M 分钟（00 ~ 59） %S 秒（00 ~ 59） %j 今年中的第几天 reboot 命令：用于重启系统，格式为 reboot poweroff 命令：用于关闭系统，格式为 poweroff wget 命令：用于在终端中下载网络文件，格式为 “ wget [参数] 下载地址” ps 命令：用于查看系统中的进程状态，格式为 “ps [参数]” 参数 作用 -a 显示所有进程（包括其他用户的进程） -u 用户以及其他详细信息 -x 显示没有控制终端的进程 系统状态检测命令 工作目录切换命令文本文件编辑命令文件目录管理命令打包压缩与搜索命令 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[]},{"title":"数据结构","slug":"数据结构","date":"2020-04-05T13:51:43.137Z","updated":"2020-04-06T06:03:33.906Z","comments":true,"path":"2020/04/05/数据结构/","link":"","permalink":"www.aabigale.top/2020/04/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/","excerpt":"数据结构","text":"数据结构 数据结构绪论基本概念与术语逻辑结构与物理结构抽象数据结构算法时间复杂度与空间复杂度线性表（list）线性表的定义线性表：零个或多个数据元素的有限序列 线性表元素的个数 n (n&gt;=0)，定义为线性表的长度，当 n=0 时，称为空表。非空表中的每个数据元素都有一个确定的位置 在较复杂的线性表中，一个数据元素可以由若干个数据项组成 学号 姓名 性别 出生年月 家庭住址 1 张三 男 1995.3 东街细想 1 号 203 室 2 李四 女 1994.8 北路 4 弄 5 号 6 室 3 王五 女 1994.12 南大道 789 号 ······ ······ ······· ······· ······· 线性表的抽象数据类型线性表的顺序存储结构 顺序存储定义 线性表的顺序存储结构，指的是用一段地址连续的存储单元依次存储线性表的数据元素 示意图如下： a1 a2 ······ ai-1 ai ······ an 顺序存储方式 线性表的顺序存储的结构代码 1234567#define MAXSIZE 20 //存储空间的初始分配量typedef int ElemType;typedef struct{ ElemType daata [MAXSIZE]; int length;}SqList; 描述顺序的结构需要三个属性： 存储空间的起始位置 线性表的最大存储容量 线性表的当前长度 数据长度与线性表长度的区别 地址计算方法 存储器中每个存储单元都有自己的编号，这个标号称为地址 顺序存储结构的插入与删除 获得元素操作 插入操作 删除操作 线性表顺序存储结构的优缺点 线性表的链式存储结构单链表的读取单链表的插入与删除单链表的整表创建与删除单链表结构与顺序存储结构优缺点静态链表循环链表双向链表总结回顾栈与队列串树图查找排序 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[]},{"title":"算法","slug":"算法","date":"2020-04-05T08:58:21.848Z","updated":"2020-04-05T10:05:18.377Z","comments":true,"path":"2020/04/05/算法/","link":"","permalink":"www.aabigale.top/2020/04/05/%E7%AE%97%E6%B3%95/","excerpt":"算法","text":"算法 大整数运算该部分重难点 12* 大整数的运算的算法思想与处理技巧* 大整数进行加、减、乘、除运算的算法框架 计算n！ 当n规模较小 （n&lt;13）123456789#include &lt;stdio.h&gt;main(){ int n,t,k; scanf(\"%d\",&amp;n); t=1; //t为累乘器 for(k=1;k&lt;=n;k++) t*=k; printf(\" %d!=%ld\\n\",n,t);} 当n规模较大123456789101112131415161718192021222324252627282930#include &lt;math.h&gt;#include &lt;stdio.h&gt;int main(){ int j,k,m,n,a[100000]; long g,t; double s; printf(\"Please input an integer: \"); scanf(\"%d\",&amp;n); s=0; for (k=2;k&lt;=n;k++) s+=log10(k); m=(int)s+1;//计算n!后的位数 for (k=1;k&lt;=m;k++) a[k]=0; a[1]=1; g=0;//进位符 for (k=2;k&lt;=n;k++) for (j=1;j&lt;=m;j++) { t=a[j]*k+g; a[j]=t%10; g=t/10; } printf(\"%d!=\",n); for (k=m;k&gt;=1;k--) printf(\"%1d\",a[k]); printf(\"\\n\"); printf(\"m=%d\\n\",m);} 大整数加法 用数组储存，假定每个数组元素存储4位 核心代码： 12345678910void add(int *a, int *b, int *c){ int i; for(i = N - 1; i &gt;= 0; i--) { c[i] = a[i] + b[i] + carry; carry=c[i]/10000; c[i]=c[i]%10000; }} 大整数减法 核心代码： 1234567891011121314void sub(int *a, int *b, int *c) { int i; for(i =N- 1; i &gt;= 0; i--) { c[i] = a[i] - b[i] - borrow; if(c[i] &gt;= 0) borrow = 0; else // 借位 { c[i] = c[i] + 10000; borrow = 1;} }} 大整数乘法 大整数与整数相乘 核心代码： 123456789void mul(int *a, int b, int *c) { int i, tmp, carry = 0; for(i = N - 1; i &gt;= 0; i--) { tmp = a[i] * b + carry; c[i] = tmp % 10000; carry = tmp / 10000; } 大整数与大整数相乘 核心代码： ​ ​ 算法的概念枚举递推递归回溯法动态规划贪心算法 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[]},{"title":"数据库系统概述 一","slug":"数据库系统概述 一","date":"2020-04-03T09:02:21.868Z","updated":"2020-04-14T08:38:00.726Z","comments":true,"path":"2020/04/03/数据库系统概述 一/","link":"","permalink":"www.aabigale.top/2020/04/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0%20%E4%B8%80/","excerpt":"基本知识与关系模型","text":"基本知识与关系模型 初步认识数据库系统该部分的重难点 * 一组概念的区分：数据库、数据库系统和数据库管理系统 * 熟悉“表”的相关要素及术语 * 熟悉数据库系统的构成（工作环境） * 了解数据库管理系统的功能：用户和系统角度为什么要学习数据库系统什么是数据库 数据库是电子化信息扥集合 数据库起源于规范化“表”的处理 基于“表”的数据库的影响 对“表”的抽象：理解-区分-命名-表达 数据库相互之间有关联关系的table的集合 什么是数据库系统 数据库系统的构成-概念层次 数据库 数据库管理系统 数据库应用 数据库管理员 计算机基本系统 数据库系统的构成-实例层次 什么是数据库管理系统&lt;如何利用&gt; 用户角度 * 数据库定义：用户通过**数据定义语言&lt;DDL&gt;**定义数据库中table的名称，标题 * 数据库操纵：用户通过**数据操纵语言&lt;DML&gt;**对数据库中的表进行增删改查 * 数据库控制：用户通过**数据控制语言&lt;DCL&gt;**控制数据库中数据的使用——哪些用户可以用，哪些不能用 * 数据库维护：数据库管理系统&lt;DBMS&gt;提供一系列程序给用户，从而对数据库进行维护 数据库语言 SQL语言 * 数据定义语言 * 数据操纵语言 * 数据控制语言 数据库语言与高级语言 系统角度 数据库系统的结构抽象与演变该部分的重难点 * 一组概念的区分：三级模式两层映像，物理独立性和逻辑独立性 * 一组概念的区分：数据→模式→数据模型 * 几种数据模型的差异：网状/层次模型→关系模型→oo数据模型数据库系统的标准结构数据模型数据库系统的演变与发展关系模型之基本概念该部分重难点 * 一组概念的区分：围绕关系的相关概念，如域。笛卡尔积，关系，关系模式，关键字/键/码，外码/外键，主码/主键,主属性与非属性。 * 三个完整性，参照完整性和用户自定义的完整性关系模型概述 关系模型的提出 最早由E.F.Codd在1970年提出 由表及表的处理方式中抽象出来的，进行数学化严格定义基础上，引入集合理论与逻辑学理论提出的 数据库三大经典数据模型之一 SQL语言是建立在关系模型基础上的 关系模型研究什么 形象的说，一个关系就是一个 table 关系模型就是处理 table 的，由三部分组成 描述DB各种数据的基本结构形式 描述table与table之间可能发生的各种操作 描述这些操作所应遵循的约束条件(完整性约束) 就是要学习：table如何描述，有哪些操作，结果是什么，有哪些约束 关系模型的三个要素 基本结构 基本操作 完整性约束：实体完整性，参照完整性和用户自定义的完整性 关系模型与关系数据库语言的关系 关系运算：关系代数和关系演算；关系演算：元组演算和域演算 关系代数示例：基于集合的运算 基于关系代数设计的数据库语言(ISBL)：用计算机可识别的符号表征关系代数的运算符号 元组演算：基于逻辑的运算 基于元组演算设计的数据库语言：······ 域演算示例：基于示例的运算 基于域演算设计的数据库语言：······ 为什么要学习关系模型与关系数据库语言 即将学习的内容概述 理解关系，理解如何用关系对table进行抽象或说严格定义 理解关系/表所具有的各种特征，理解关系模型 熟练掌握关系代数，元组演算和域演算 什么是关系 什么是”表” 123为什么把表称为关系？怎样严格定义一个\"表\"？\"表\"和\"关系\"有什么异同？ “表”的基本构成要素 如何严格地定义table “ 表 “的严格定义–关系？ 首先定义”列”的取值范围”域” 1234域：* 一组值的集合，这组值具有相同的数据类型 如整数的集合，，全体学生的集合* 集合中元素的个数称为域的基数 再定义” 元组 “及所有可能组合的元组：笛卡尔积 笛卡尔积：笛卡尔积是有 n 个域形成的所有可能组合的集合 笛卡尔积的基数：若 Di 的基数为 mi ，则笛卡尔积的基数即元组个数为 m1 * m2 * ··· * mn 一组域D1，D2，··· ，Dn的笛卡尔积 D1 * D2 * ····*Dn = { (d1，d2，··· ，dn) | di∈Di，i = 1，···· ，n} 笛卡尔积的每个元素( d1 , d2, … , dn ) 称作一个 *n-元组 * 笛卡尔积的的具有意义的组合称为关系 一组域D1，D2，··· ，Dn的笛卡尔积 ​ document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[]},{"title":"前端入门","slug":"前端入门","date":"2020-04-03T09:02:21.861Z","updated":"2020-04-08T11:53:19.808Z","comments":true,"path":"2020/04/03/前端入门/","link":"","permalink":"www.aabigale.top/2020/04/03/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/","excerpt":"web前端开发最佳实践前端入门 HTML&amp;CSS 学习","text":"web前端开发最佳实践前端入门 HTML&amp;CSS 学习 第一部分 高效web前端开发综述HTML相关开发的 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[]},{"title":"Java学习","slug":"Java学习","date":"2020-04-03T09:02:21.839Z","updated":"2020-04-17T09:56:45.147Z","comments":true,"path":"2020/04/03/Java学习/","link":"","permalink":"www.aabigale.top/2020/04/03/Java%E5%AD%A6%E4%B9%A0/","excerpt":"基础篇","text":"基础篇 面向对象什么是面向对象面向对象与面向过程面向对象的三大基本特征面向对象的五大基本原则封装、继承、多态 什么是多态 方法重写与重载 Java的继承与实现 Java的继承与组合 构造函数与默认构造函数 类变量、成员变量和局部变量 成员变量和方法作用域 平台无关性 Java如何实现的平台无关性的 JVM还支持哪些语言 值传递 值传递、引用传递 为什么说Java中只有值传递 Java基础知识基本数据类型 8种基本数据类型 整型中byte、short、int、long的取值范围 什么是浮点型？ 什么是单精度和双精度？ 为什么不能用浮点型表示金额？ 自动拆装箱 自动拆装箱 Integer的缓存机制 如何正确定义接口的返回值(boolean/Boolean)类型及命名(success/Success) String 字符串的不可变性 JDK 6和JDK 7中substring的原理及区别 replaceFirst、replaceAll、replace区别 String对“+”的重载 字符串拼接的几种方式和区别 String.valueOf和Integer.toString的区别 switch对String的支持 字符串池 常量池（运行时常量池、Class常量池） intern Java中各种关键字 transient instanceof volatile synchronized final static const 集合类 Collection和Collections区别 常用集合类的使用 Set和List区别？ ArrayList和LinkedList和Vector的区别 SynchronizedList和Vector的区别 Set如何保证元素不重复? HashMap、HashTable、ConcurrentHashMap区别 Java 8中Map相关的红黑树的引用背景、原理等 HashMap的容量、扩容、hash等原理 Java 8中stream相关用法 Apache集合处理工具类的使用 不同版本的JDK中HashMap的实现的区别以及原因 Arrays.asList获得的List使用时需要注意什么 Collection如何迭代 Enumeration和Iterator区别 如何在遍历的同时删除ArrayList中的元素 fail-fast 和 fail-safe CopyOnWriteArrayList ConcurrentSkipListMap 枚举 枚举的用法 枚举的实现 枚举与单例 Enum类 Java枚举如何比较 switch对枚举的支持 枚举的序列化如何实现 枚举的线程安全性问题 IO 字符流、字节流 输入流、输出流 字节流和字符流之间的相互转换 同步、异步 阻塞、非阻塞 Linux 5种IO模型 BIO、NIO和AIO的区别、三种IO的用法与原理 netty 反射 反射与工厂模式、 反射有什么作用 Class类 java.lang.reflect.* 动态代理 静态代理 动态代理 动态代理和反射的关系 动态代理的几种实现方式 AOP 序列化 什么是序列化与反序列化 Java如何实现序列化与反序列化 Serializable 和 Externalizable 有何不同 为什么序列化 serialVersionUID 为什么serialVersionUID不能随便改 transient 序列化底层原理 序列化如何破坏单例模式 protobuf 为什么说序列化并不安全 注解 元注解 自定义注解 Java中常用注解使用 注解与反射的结合 如何自定义一个注解？ Spring常用注解 泛型 什么是泛型 类型擦除 泛型带来的问题 泛型中K T V E ？ object等的含义 泛型各种用法 限定通配符和非限定通配符 上下界限定符extends 和 super List和原始类型List之间的区别? List和List之间的区别是什么? 单元测试 junit junit 和Spring 的结合 mock mockito 内存数据库（h2） 正则表达式 java.lang.util.regex.* 常用的Java工具库 commons.lang commons.*... guava-libraries netty API&amp;SPI API API和SPI的关系和区别 如何定义SPI SPI的实现原理 异常 Error和Exception 异常类型 异常相关关键字 正确处理异常 自定义异常 异常链 try-with-resources finally和return的执行顺序 时间处理 时区 冬令时和夏令时 时间戳 Java中时间API 格林威治时间 CET,UTC,GMT,CST几种常见时间的含义和关系 SimpleDateFormat的线程安全性问题 Java 8中的时间处理 如何在东八区的计算机上获取美国时间 yyyy和YYYY有什么区别？ 编码方式 什么是ASCII？ Unicode 有了Unicode为啥还需要UTF-8 UTF8、UTF16、UTF32区别 有了UTF8为什么还需要GBK？ GBK、GB2312、GB18030之间的区别 URL编解码 Big Endian和Little Endian 如何解决乱码问题 语法糖 Java中语法糖原理、解语法糖 语法糖介绍 JMS 什么是Java消息服务 JMS消息传送模型 JMX java.lang.management.* javax.management.* Java 8 lambda表达式 Stream API 时间API 阅读源代码 String Integer Long Enum BigDecimal ThreadLocal ClassLoader &amp; URLClassLoader ArrayList &amp; LinkedList HashMap &amp; LinkedHashMap &amp; TreeMap &amp; CouncurrentHashMap HashSet &amp; LinkedHashSet &amp; TreeSet Java并发编程并发与并行 什么是并发 什么是并行 并发与并行的区别 线程 线程与进程的区别 线程的实现 线程的状态 线程优先级 线程调度 多线程如何Debug 守护线程 创建线程的多种方式 继承Thread类创建线程 实现Runnable接口创建线程 通过Callable和FutureTask创建线程 通过线程池创建线程 线程池 自己设计线程池 submit() 和 execute() 线程池原理 为什么不允许使用Executors创建线程池 线程安全 什么是线程安全 多级缓存和一致性问题 CPU时间片和原子性问题 指令重排和有序性问题 线程安全和内存模型的关系 happens-before as-if-serial 锁 可重入锁 阻塞锁 乐观锁与悲观锁 数据库相关锁机制 分布式锁 无锁 CAS CAS的ABA问题 锁优化 偏向锁 轻量级锁 重量级锁 锁消除 锁粗化 自旋锁 死锁 什么是死锁 死锁的原因 如何避免死锁 写一个死锁的程序 死锁问题如何排查 synchronized synchronized是如何实现的？ synchronized和lock之间关系 不使用synchronized如何实现一个线程安全的单例 synchronized和原子性 synchronized和可见性 synchronized和有序性 volatile 编译器指令重排和CPU指令重排 volatile的实现原理 内存屏障 volatile和原子性 volatile和可见性 volatile和有序性 有了symchronized为什么还需要volatile 线程相关方法 start &amp; run sleep 和 wait notify &amp; notifyAll ThreadLocal ThreadLocal 原理 ThreadLocal 底层的数据结构 写代码来解决生产者消费者问题并发包 同步容器与并发容器 Thread Runnable Callable ReentrantLock ReentrantReadWriteLock Atomic* Semaphore CountDownLatch ConcurrentHashMap Executors document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[]},{"title":"数据库作业踩的坑","slug":"数据库作业踩的坑","date":"2020-04-03T09:02:21.812Z","updated":"2020-04-03T10:59:13.317Z","comments":true,"path":"2020/04/03/数据库作业踩的坑/","link":"","permalink":"www.aabigale.top/2020/04/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BD%9C%E4%B8%9A%E8%B8%A9%E7%9A%84%E5%9D%91/","excerpt":"第一次数据库作业踩的坑作业要求：创建数据库，并在数据库中创建数据表，用SQL命令修改表的结构，将数据插入到表中，并完成SQL查询。","text":"第一次数据库作业踩的坑作业要求：创建数据库，并在数据库中创建数据表，用SQL命令修改表的结构，将数据插入到表中，并完成SQL查询。 一、启动服务 管理员授权 Windows，不然会启动失败 用 mysql -uroot -p密码 二、创建数据表 ](1.png)&nbsp; &nbsp; ![ 最后一个字段不能加‘，’ 三、用SQL命令修改表的结构 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[]},{"title":"计算机组成原理<一>","slug":"计算机组成原理-一","date":"2020-03-16T13:15:19.000Z","updated":"2020-04-03T10:59:13.310Z","comments":true,"path":"2020/03/16/计算机组成原理-一/","link":"","permalink":"www.aabigale.top/2020/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86-%E4%B8%80/","excerpt":"第一章 计算机系统概论","text":"第一章 计算机系统概论 1.1 计算机系统简介计算机的软硬件概念计算机系统 硬件：计算机实体 软件：具有各类特殊功能的（程序） 软件分为 系统软件： 用来管理整个计算机系统 语言处理系统 操作系统 服务性程序 数据库管理系统 网络软件 软件系统： 按任务需要编制成的各种软件 计算机系统的层次结构高级语言 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 虚拟机器M3 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 用编译程序翻译成汇编语言 汇编语言 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 虚拟机器M2 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 用汇编程序翻译成机器语言程序 操作系统 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 虚拟机器M &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 用机器语言解释操作系统 机器语言 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 实际机器M1 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 用微指令解释机器指令 微指令系统 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 微程序机器M0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 由硬件直接执行微指令 计算机体系结构和计算机组成 计算机体系结构 &lt;有无乘法指令&gt; ：计算机系统属性概念性的结构与功能特性 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;（指令系统，数据类型，寻址技术，I/O机理） 计算机组成 &lt;如何实现乘法指令&gt; ：实现计算机体系结构所体现的属性 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; （具体指令的实现） 计算机的组成冯若依曼机的特点 计算机由五大件组成 指令和数据以同等地位存于存储器，可按地址寻访 指令和数据用二进制表示 指令由操作码和地址码组成 存储程序 以运算器为中心 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[]}],"categories":[],"tags":[]}