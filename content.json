{"meta":{"title":"Aabigale's blog","subtitle":"","description":"","author":"Aabigale","url":"http://yoursite.com","root":"/"},"pages":[{"title":"","date":"2020-04-03T08:23:58.434Z","updated":"2020-04-03T08:23:58.434Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"","date":"2020-04-03T09:01:13.200Z","updated":"2020-04-03T09:01:13.200Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"","date":"2020-04-03T08:24:18.028Z","updated":"2020-04-03T08:24:18.028Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"}],"posts":[{"title":"Linux","slug":"Linux","date":"2020-04-06T03:15:10.256Z","updated":"2020-04-06T03:15:10.256Z","comments":true,"path":"2020/04/06/Linux/","link":"","permalink":"http://yoursite.com/2020/04/06/Linux/","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[]},{"title":"数据结构","slug":"数据结构","date":"2020-04-05T13:51:43.137Z","updated":"2020-04-05T13:51:43.138Z","comments":true,"path":"2020/04/05/数据结构/","link":"","permalink":"http://yoursite.com/2020/04/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/","excerpt":"","text":"数据结构数据结构绪论基本概念与术语逻辑结构与物理结构抽象数据结构算法时间复杂度与空间复杂度线性表（list）线性表的定义线性表：零个或多个数据元素的有限序列 线性表元素的个数 n (n&gt;=0)，定义为线性表的长度，当 n=0 时，称为空表。非空表中的每个数据元素都有一个确定的位置 在较复杂的线性表中，一个数据元素可以由若干个数据项组成 学号 姓名 性别 出生年月 家庭住址 1 张三 男 1995.3 东街细想 1 号 203 室 2 李四 女 1994.8 北路 4 弄 5 号 6 室 3 王五 女 1994.12 南大道 789 号 ······ ······ ······· ······· ······· 线性表的抽象数据类型线性表的顺序存储结构 顺序存储定义 线性表的顺序存储结构，指的是用一段地址连续的存储单元依次存储线性表的数据元素 示意图如下： a1 a2 ······ ai-1 ai ······ an 顺序存储方式 线性表的顺序存储的结构代码 1234567#define MAXSIZE 20 //存储空间的初始分配量typedef int ElemType;typedef struct{ ElemType daata [MAXSIZE]; int length;}SqList; 描述顺序的结构需要三个属性： 存储空间的起始位置 线性表的最大存储容量 线性表的当前长度 数据长度与线性表长度的区别 地址计算方法 存储器中每个存储单元都有自己的编号，这个标号称为地址 顺序存储结构的插入与删除 获得元素操作 插入操作 删除操作 线性表顺序存储结构的优缺点 线性表的链式存储结构单链表的读取单链表的插入与删除单链表的整表创建与删除单链表结构与顺序存储结构优缺点静态链表循环链表双向链表总结回顾栈与队列串树图查找排序 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[]},{"title":"算法","slug":"算法","date":"2020-04-05T08:58:21.848Z","updated":"2020-04-05T10:05:18.377Z","comments":true,"path":"2020/04/05/算法/","link":"","permalink":"http://yoursite.com/2020/04/05/%E7%AE%97%E6%B3%95/","excerpt":"算法","text":"算法 大整数运算该部分重难点 12* 大整数的运算的算法思想与处理技巧* 大整数进行加、减、乘、除运算的算法框架 计算n！ 当n规模较小 （n&lt;13）123456789#include &lt;stdio.h&gt;main(){ int n,t,k; scanf(\"%d\",&amp;n); t=1; //t为累乘器 for(k=1;k&lt;=n;k++) t*=k; printf(\" %d!=%ld\\n\",n,t);} 当n规模较大123456789101112131415161718192021222324252627282930#include &lt;math.h&gt;#include &lt;stdio.h&gt;int main(){ int j,k,m,n,a[100000]; long g,t; double s; printf(\"Please input an integer: \"); scanf(\"%d\",&amp;n); s=0; for (k=2;k&lt;=n;k++) s+=log10(k); m=(int)s+1;//计算n!后的位数 for (k=1;k&lt;=m;k++) a[k]=0; a[1]=1; g=0;//进位符 for (k=2;k&lt;=n;k++) for (j=1;j&lt;=m;j++) { t=a[j]*k+g; a[j]=t%10; g=t/10; } printf(\"%d!=\",n); for (k=m;k&gt;=1;k--) printf(\"%1d\",a[k]); printf(\"\\n\"); printf(\"m=%d\\n\",m);} 大整数加法 用数组储存，假定每个数组元素存储4位 核心代码： 12345678910void add(int *a, int *b, int *c){ int i; for(i = N - 1; i &gt;= 0; i--) { c[i] = a[i] + b[i] + carry; carry=c[i]/10000; c[i]=c[i]%10000; }} 大整数减法 核心代码： 1234567891011121314void sub(int *a, int *b, int *c) { int i; for(i =N- 1; i &gt;= 0; i--) { c[i] = a[i] - b[i] - borrow; if(c[i] &gt;= 0) borrow = 0; else // 借位 { c[i] = c[i] + 10000; borrow = 1;} }} 大整数乘法 大整数与整数相乘 核心代码： 123456789void mul(int *a, int b, int *c) { int i, tmp, carry = 0; for(i = N - 1; i &gt;= 0; i--) { tmp = a[i] * b + carry; c[i] = tmp % 10000; carry = tmp / 10000; } 大整数与大整数相乘 核心代码： ​ ​ 算法的概念枚举递推递归回溯法动态规划贪心算法 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[]},{"title":"数据库系统概述 一","slug":"数据库系统概述 一","date":"2020-04-03T09:02:21.868Z","updated":"2020-04-06T05:50:36.198Z","comments":true,"path":"2020/04/03/数据库系统概述 一/","link":"","permalink":"http://yoursite.com/2020/04/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0%20%E4%B8%80/","excerpt":"数据库系统","text":"数据库系统 基本知识与关系模型初步认识数据库系统该部分的重难点 * 一组概念的区分：数据库、数据库系统和数据库管理系统 * 熟悉“表”的相关要素及术语 * 熟悉数据库系统的构成（工作环境） * 了解数据库管理系统的功能：用户和系统角度 为什么要学习数据库系统 什么是数据库 数据库是电子化信息扥集合 数据库起源于规范化“表”的处理 基于“表”的数据库的影响 对“表”的抽象：理解-区分-命名-表达 数据库相互之间有关联关系的table的集合 什么是数据库系统 数据库系统的构成-概念层次 数据库 数据库管理系统 数据库应用 数据库管理员 计算机基本系统 数据库系统的构成-实例层次 什么是数据库管理系统&lt;如何利用&gt; 用户角度 * 数据库定义：用户通过**数据定义语言&lt;DDL&gt;**定义数据库中table的名称，标题 * 数据库操纵：用户通过**数据操纵语言&lt;DML&gt;**对数据库中的表进行增删改查 * 数据库控制：用户通过**数据控制语言&lt;DCL&gt;**控制数据库中数据的使用——哪些用户可以用，哪些不能用 * 数据库维护：数据库管理系统&lt;DBMS&gt;提供一系列程序给用户，从而对数据库进行维护 数据库语言 SQL语言 * 数据定义语言 * 数据操纵语言 * 数据控制语言 数据库语言与高级语言 系统角度 数据库系统的结构抽象与演变该部分的重难点 * 一组概念的区分：三级模式两层映像，物理独立性和逻辑独立性 * 一组概念的区分：数据→模式→数据模型 * 几种数据模型的差异：网状/层次模型→关系模型→oo数据模型 数据库系统的标准结构 数据模型 数据库系统的演变与发展 关系模型之基本概念该部分重难点 * 一组概念的区分：围绕关系的相关概念，如域。笛卡尔积，关系，关系模式，关键字/键/码，外码/外键，主码/主键,主属性与非属性。 * 三个完整性，参照完整性和用户自定义的完整性关系模型概述 关系模型的提出 最早由E.F.Codd在1970年提出 由表及表的处理方式中抽象出来的，进行数学化严格定义基础上，引入集合理论与逻辑学理论提出的 数据库三大经典数据模型之一 SQL语言是建立在关系模型基础上的 关系模型研究什么 形象的说，一个关系就是一个 table 关系模型就是处理 table 的，由三部分组成 描述DB各种数据的基本结构形式 描述table与table之间可能发生的各种操作 描述这些操作所应遵循的约束条件(完整性约束) 就是要学习：table如何描述，有哪些操作，结果是什么，有哪些约束 关系模型的三个要素 基本结构 基本操作 完整性约束：实体完整性，参照完整性和用户自定义的完整性 关系模型与关系数据库语言的关系 关系运算：关系代数和关系演算；关系演算：元组演算和域演算 关系代数示例：基于集合的运算 基于关系代数设计的数据库语言(ISBL)：用计算机可识别的符号表征关系代数的运算符号 元组演算：基于逻辑的运算 基于元组演算设计的数据库语言：······ 域演算示例：基于示例的运算 基于域演算设计的数据库语言：······ 为什么要学习关系模型与关系数据库语言 即将学习的内容概述 理解关系，理解如何用关系对table进行抽象或说严格定义 理解关系/表所具有的各种特征，理解关系模型 熟练掌握关系代数，元组演算和域演算 什么是关系 什么是”表” 123为什么把表称为关系？怎样严格定义一个\"表\"？\"表\"和\"关系\"有什么异同？ “表”的基本构成要素 如何严格地定义table 首先定义”列”的取值范围”域” 1234域：* 一组值的集合，这组值具有相同的数据类型 如整数的集合，字符串的集合，全体学生的集合* 集合中元素的个数称为域的基数 ​ 关系模型中的完整性约束数据库语言-SQL数据建模与数据库设计数据库管理系统实现技术 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[]},{"title":"前端入门","slug":"前端入门","date":"2020-04-03T09:02:21.861Z","updated":"2020-04-05T14:48:58.346Z","comments":true,"path":"2020/04/03/前端入门/","link":"","permalink":"http://yoursite.com/2020/04/03/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/","excerpt":"前端入门 HTML&amp;CSS 学习","text":"前端入门 HTML&amp;CSS 学习 HTML入门教程 ##&lt;结构&gt;在网页中HTML专门负责网页的结构 HTML编辑器nodepad++，推荐使用vscode。将vscode翻译成中文界面，下载插件Chinese HTML基础结构&lt;!doctype&amp;nbsp;html&gt;文档声明 &lt;html&gt; &lt;head&gt;帮助浏览器或者搜索引擎解析网页 &lt;meta&gt; &lt;title&gt;网页的标题&lt;/title&gt; &lt;/head&gt; &lt;body&gt; 网页显示内容 &lt;/body&gt; &lt;/html&gt; 以上是网页的基本结构 HTML 在&lt;head&gt;内的标签 &lt;meta&gt;用来设置网页的元数据 charset 指定网页的字符 name 指定的数据的名称 &lt;keywords 表示网页的关键字&gt;&lt;description 用于网站的指定描述&gt;具体详情查阅HTML手册 content 指定的数据内容 &lt;title&gt;网页的标题&lt;/title&gt;显示在浏览器的搜索栏，根据title判断网页内容 HTML 在&lt;body&gt;内的标签&lt;body&gt;表示网页的主体，网页所有可见的内容都应该写在body 自结束标签 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;像&lt;img&gt;，&lt;imput&gt; 注释：&lt;!– 注释内容 –&gt; 标签属性：在标签中（开始标签或自结束标签）可以设置属性属性是一个名值对（x=”y”或’y’）&lt;font&nbsp;&nbsp;x=”y”&gt;需要改变属性的内容&lt;/font&gt;&nbsp;&nbsp;x是名，y是值 实体语法 &lt;在网页中编写特殊符时会出现问题&gt; 实体的名字; 语义化标签(1)：&lt;一般来说在块元素里面放行内元素&gt; 块元素：对网页进行布局，在页面中独占一行的标签&lt;p&gt;标签在页面中表示一个段落，p标签中不能放任何块元素&lt;hgroup&gt;标签为标题组，可以存放一组相关的标题 行内元素：用来包裹文字在页面中不会独占一行&lt;em&gt;标签表示语音语调的加重&lt;strong&gt;表示强调重要内容 语义化标签（2）：结构化语义标签 &lt;header&gt;表示网页的头部，可以有多个 &lt;main&gt;表示网页的主体，只能有一个 &lt;foot&gt;表示网页的底部 &lt;nav&gt;表示网页的导航 &lt;aside&gt;和主题相关的内容（侧边栏） &lt;artice&gt;表示一个独立文章 &lt;section&gt;表示一个独立的区块 **div 没有语义，就表示一个区块，目前主要的布局元素 span没有任何语义，一般用来选中文字** 语义化标签（3）：列表（list）列表之间可以相互嵌套 有序列表 &lt;ui&gt;&lt;/ui&gt;创建 无序列表 &lt;oi&gt;&lt;/oi&gt;创建 定义列表 &lt;dl&gt;&lt;/dl&gt;创建&lt;dt&gt;&lt;/dt&gt;定义到内容&lt;dd&gt;&lt;/dd&gt;对内容进行解释说明 超链接：从当前页面跳转到其他页面或者当前页面的其他位置,在标签中可以除它外的人和元素 &nbsp;&nbsp;&nbsp;&nbsp;&lt;a&gt;&lt;/a&gt;定义超链接&nbsp;&nbsp;&nbsp;&nbsp;href属性 指定跳转路径，相对路径绝对路径&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;将href属性设置为#回到网页顶部，底部的设计利用id属性&nbsp;&nbsp;&nbsp;&nbsp;id属性 元素的唯一标识，在同一个不能重复出现id属性&nbsp;&nbsp;&nbsp;&nbsp;target属性，用来指定超链接打开的位置&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;可选值：&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_self 默认值在当前页面打开超链接。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_blank 在一个新的页面打开超链接。 图片标签：用于向当前页面引入一个外部图片img属性替换元素，具有块元素和行内元素的特点 使用img标签引入，img是自结束标签属性&nbsp;&nbsp;&nbsp;&nbsp;src属性指定外部图片路径&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alt属性图片描述搜索引擎根据alt内容识别图片&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width,height属性 图片的格式 内联框架：用于向当前界面引入一个其他页面 使用&lt;iframe&gt;&lt;/iframe&gt;标签&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; src属性指定引入网页属性&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;frameborder属性指定内联框架的边框 音视频： audio标签引入外部音频&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;controls属性是否允许用户控制播放&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aotoplayer属性是否允许自动播放，大部分浏览器都不会自动对音乐进行播放 CSS&lt;表现&gt;入门教程css简述：css用来设置网页中的元素样式 修改元素样式 第一种方法&lt;内联样式，行内元素&gt;：在标签内部通过style属性来设置元素的样式，该方法只能对一个标签生效 第二种方法：内部样式表，将样式编写到head中的style标签里&lt;相当于#define&gt; 第三种方法：外部样式表，将css样式编写到.css文件中，然后通过link标签引用外部的css文件，**可以使用网页的缓存机制，从而加快网页的加载速度 css基本语法1css的注释&lt;在&lt;style&gt;&lt;/style&gt;中&gt;/**/ 选择器通过选择器可以选中页面的指定元素 ​ ​ document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[]},{"title":"Java学习","slug":"Java学习","date":"2020-04-03T09:02:21.839Z","updated":"2020-04-03T11:44:58.700Z","comments":true,"path":"2020/04/03/Java学习/","link":"","permalink":"http://yoursite.com/2020/04/03/Java%E5%AD%A6%E4%B9%A0/","excerpt":"java 学习","text":"java 学习 Java程序的安装Java语法Java的基本语法 注释 标识符 通用规范 Java中的变量与常量 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[]},{"title":"数据库作业踩的坑","slug":"数据库作业踩的坑","date":"2020-04-03T09:02:21.812Z","updated":"2020-04-03T10:59:13.317Z","comments":true,"path":"2020/04/03/数据库作业踩的坑/","link":"","permalink":"http://yoursite.com/2020/04/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BD%9C%E4%B8%9A%E8%B8%A9%E7%9A%84%E5%9D%91/","excerpt":"第一次数据库作业踩的坑作业要求：创建数据库，并在数据库中创建数据表，用SQL命令修改表的结构，将数据插入到表中，并完成SQL查询。","text":"第一次数据库作业踩的坑作业要求：创建数据库，并在数据库中创建数据表，用SQL命令修改表的结构，将数据插入到表中，并完成SQL查询。 一、启动服务 管理员授权 Windows，不然会启动失败 用 mysql -uroot -p密码 二、创建数据表 ](1.png)&nbsp; &nbsp; ![ 最后一个字段不能加‘，’ 三、用SQL命令修改表的结构 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[]},{"title":"计算机组成原理<一>","slug":"计算机组成原理-一","date":"2020-03-16T13:15:19.000Z","updated":"2020-04-03T10:59:13.310Z","comments":true,"path":"2020/03/16/计算机组成原理-一/","link":"","permalink":"http://yoursite.com/2020/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86-%E4%B8%80/","excerpt":"第一章 计算机系统概论","text":"第一章 计算机系统概论 1.1 计算机系统简介计算机的软硬件概念计算机系统 硬件：计算机实体 软件：具有各类特殊功能的（程序） 软件分为 系统软件： 用来管理整个计算机系统 语言处理系统 操作系统 服务性程序 数据库管理系统 网络软件 软件系统： 按任务需要编制成的各种软件 计算机系统的层次结构高级语言 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 虚拟机器M3 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 用编译程序翻译成汇编语言 汇编语言 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 虚拟机器M2 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 用汇编程序翻译成机器语言程序 操作系统 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 虚拟机器M &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 用机器语言解释操作系统 机器语言 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 实际机器M1 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 用微指令解释机器指令 微指令系统 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 微程序机器M0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 由硬件直接执行微指令 计算机体系结构和计算机组成 计算机体系结构 &lt;有无乘法指令&gt; ：计算机系统属性概念性的结构与功能特性 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;（指令系统，数据类型，寻址技术，I/O机理） 计算机组成 &lt;如何实现乘法指令&gt; ：实现计算机体系结构所体现的属性 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; （具体指令的实现） 计算机的组成冯若依曼机的特点 计算机由五大件组成 指令和数据以同等地位存于存储器，可按地址寻访 指令和数据用二进制表示 指令由操作码和地址码组成 存储程序 以运算器为中心 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[]}],"categories":[],"tags":[]}